#![allow(warnings)]
/* automatically generated by rust-bindgen 0.57.0 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub const _LIBNDS_MAJOR_: u32 = 1;
pub const _LIBNDS_MINOR_: u32 = 8;
pub const _LIBNDS_PATCH_: u32 = 0;
pub const _LIBNDS_STRING: &'static [u8; 21usize] = b"libNDS Release 1.8.0\0";
pub const _NEWLIB_VERSION_H__: u32 = 1;
pub const _NEWLIB_VERSION: &'static [u8; 6usize] = b"3.3.0\0";
pub const __NEWLIB__: u32 = 3;
pub const __NEWLIB_MINOR__: u32 = 3;
pub const __NEWLIB_PATCHLEVEL__: u32 = 0;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __ATFILE_VISIBLE: u32 = 1;
pub const __BSD_VISIBLE: u32 = 1;
pub const __GNU_VISIBLE: u32 = 0;
pub const __ISO_C_VISIBLE: u32 = 2011;
pub const __LARGEFILE_VISIBLE: u32 = 0;
pub const __MISC_VISIBLE: u32 = 1;
pub const __POSIX_VISIBLE: u32 = 200809;
pub const __SVID_VISIBLE: u32 = 1;
pub const __XSI_VISIBLE: u32 = 0;
pub const __SSP_FORTIFY_LEVEL: u32 = 0;
pub const _POSIX_MONOTONIC_CLOCK: u32 = 200112;
pub const _POSIX_TIMERS: u32 = 1;
pub const __have_longlong64: u32 = 1;
pub const __have_long32: u32 = 1;
pub const ___int8_t_defined: u32 = 1;
pub const ___int16_t_defined: u32 = 1;
pub const ___int32_t_defined: u32 = 1;
pub const ___int64_t_defined: u32 = 1;
pub const ___int_least8_t_defined: u32 = 1;
pub const ___int_least16_t_defined: u32 = 1;
pub const ___int_least32_t_defined: u32 = 1;
pub const ___int_least64_t_defined: u32 = 1;
pub const __int20: u32 = 2;
pub const __int20__: u32 = 2;
pub const __INT8: &'static [u8; 3usize] = b"hh\0";
pub const __INT16: &'static [u8; 2usize] = b"h\0";
pub const __INT64: &'static [u8; 3usize] = b"ll\0";
pub const __FAST8: &'static [u8; 3usize] = b"hh\0";
pub const __FAST16: &'static [u8; 2usize] = b"h\0";
pub const __FAST64: &'static [u8; 3usize] = b"ll\0";
pub const __LEAST8: &'static [u8; 3usize] = b"hh\0";
pub const __LEAST16: &'static [u8; 2usize] = b"h\0";
pub const __LEAST64: &'static [u8; 3usize] = b"ll\0";
pub const __int8_t_defined: u32 = 1;
pub const __int16_t_defined: u32 = 1;
pub const __int32_t_defined: u32 = 1;
pub const __int64_t_defined: u32 = 1;
pub const __int_least8_t_defined: u32 = 1;
pub const __int_least16_t_defined: u32 = 1;
pub const __int_least32_t_defined: u32 = 1;
pub const __int_least64_t_defined: u32 = 1;
pub const __int_fast8_t_defined: u32 = 1;
pub const __int_fast16_t_defined: u32 = 1;
pub const __int_fast32_t_defined: u32 = 1;
pub const __int_fast64_t_defined: u32 = 1;
pub const WINT_MIN: u32 = 0;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const TRUE: u32 = 1;
pub const FALSE: u32 = 0;
pub const COPY_MODE_HWORD: u32 = 0;
pub const COPY_MODE_COPY: u32 = 0;
pub const CARD_CR1_ENABLE: u32 = 128;
pub const CARD_CR1_IRQ: u32 = 64;
pub const SPI_EEPROM_WRSR: u32 = 1;
pub const SPI_EEPROM_PP: u32 = 2;
pub const SPI_EEPROM_READ: u32 = 3;
pub const SPI_EEPROM_WRDI: u32 = 4;
pub const SPI_EEPROM_RDSR: u32 = 5;
pub const SPI_EEPROM_WREN: u32 = 6;
pub const SPI_EEPROM_PW: u32 = 10;
pub const SPI_EEPROM_FAST: u32 = 11;
pub const SPI_EEPROM_RDID: u32 = 159;
pub const SPI_EEPROM_RDP: u32 = 171;
pub const SPI_EEPROM_DPD: u32 = 185;
pub const CARD_ACTIVATE: u32 = 2147483648;
pub const CARD_WR: u32 = 1073741824;
pub const CARD_nRESET: u32 = 536870912;
pub const CARD_SEC_LARGE: u32 = 268435456;
pub const CARD_CLK_SLOW: u32 = 134217728;
pub const CARD_SEC_CMD: u32 = 4194304;
pub const CARD_SEC_SEED: u32 = 32768;
pub const CARD_SEC_EN: u32 = 16384;
pub const CARD_SEC_DAT: u32 = 8192;
pub const CARD_BUSY: u32 = 2147483648;
pub const CARD_DATA_READY: u32 = 8388608;
pub const CARD_CMD_DUMMY: u32 = 159;
pub const CARD_CMD_HEADER_READ: u32 = 0;
pub const CARD_CMD_HEADER_CHIPID: u32 = 144;
pub const CARD_CMD_ACTIVATE_BF: u32 = 60;
pub const CARD_CMD_ACTIVATE_SEC: u32 = 64;
pub const CARD_CMD_SECURE_CHIPID: u32 = 16;
pub const CARD_CMD_SECURE_READ: u32 = 32;
pub const CARD_CMD_DISABLE_SEC: u32 = 96;
pub const CARD_CMD_DATA_MODE: u32 = 160;
pub const CARD_CMD_DATA_READ: u32 = 183;
pub const CARD_CMD_DATA_CHIPID: u32 = 184;
pub const CARD_ENABLE: u32 = 32768;
pub const CARD_SPI_ENABLE: u32 = 8192;
pub const CARD_SPI_BUSY: u32 = 128;
pub const CARD_SPI_HOLD: u32 = 64;
pub const CARD_SPICNTH_ENABLE: u32 = 128;
pub const CARD_SPICNTH_IRQ: u32 = 64;
pub const DMA_START_NOW: u32 = 0;
pub const DMA_START_CARD: u32 = 671088640;
pub const DMA_START_FIFO: u32 = 939524096;
pub const DMA_DISP_FIFO: u32 = 536870912;
pub const DMA_16_BIT: u32 = 0;
pub const DMA_SRC_INC: u32 = 0;
pub const DMA_DST_INC: u32 = 0;
pub const DMA_DST_RESET: u32 = 6291456;
pub const MAX_INTERRUPTS: u32 = 25;
pub const __NEWLIB_H__: u32 = 1;
pub const _WANT_IO_C99_FORMATS: u32 = 1;
pub const _WANT_IO_LONG_LONG: u32 = 1;
pub const _WANT_IO_POS_ARGS: u32 = 1;
pub const _REENT_CHECK_VERIFY: u32 = 1;
pub const _MB_CAPABLE: u32 = 1;
pub const _MB_LEN_MAX: u32 = 8;
pub const HAVE_INITFINI_ARRAY: u32 = 1;
pub const _ATEXIT_DYNAMIC_ALLOC: u32 = 1;
pub const _HAVE_LONG_DOUBLE: u32 = 1;
pub const _HAVE_CC_INHIBIT_LOOP_TO_LIBCALL: u32 = 1;
pub const _LDBL_EQ_DBL: u32 = 1;
pub const _FVWRITE_IN_STREAMIO: u32 = 1;
pub const _FSEEK_OPTIMIZATION: u32 = 1;
pub const _UNBUF_STREAM_OPT: u32 = 1;
pub const __OBSOLETE_MATH_DEFAULT: u32 = 1;
pub const __OBSOLETE_MATH: u32 = 1;
pub const __RAND_MAX: u32 = 2147483647;
pub const BUS_OWNER_ARM9: u32 = 1;
pub const BUS_OWNER_ARM7: u32 = 0;
pub const ARGV_MAGIC: u32 = 1600221799;
pub const BOOTSIG: u64 = 7094704827215605602;
pub const BUS_CLOCK: u32 = 33513982;
pub const TIMER_ENABLE: u32 = 128;
pub const TIMER_IRQ_REQ: u32 = 64;
pub const TIMER_CASCADE: u32 = 4;
pub const TIMER_DIV_1: u32 = 0;
pub const TIMER_DIV_64: u32 = 1;
pub const TIMER_DIV_256: u32 = 2;
pub const TIMER_DIV_1024: u32 = 3;
pub const _NULL: u32 = 0;
pub const _ATEXIT_SIZE: u32 = 32;
pub const _RAND48_SEED_0: u32 = 13070;
pub const _RAND48_SEED_1: u32 = 43981;
pub const _RAND48_SEED_2: u32 = 4660;
pub const _RAND48_MULT_0: u32 = 58989;
pub const _RAND48_MULT_1: u32 = 57068;
pub const _RAND48_MULT_2: u32 = 5;
pub const _RAND48_ADD: u32 = 11;
pub const _REENT_EMERGENCY_SIZE: u32 = 25;
pub const _REENT_ASCTIME_SIZE: u32 = 26;
pub const _REENT_SIGNAL_SIZE: u32 = 24;
pub const _N_LISTS: u32 = 30;
pub const __GNUCLIKE_ASM: u32 = 3;
pub const __GNUCLIKE___TYPEOF: u32 = 1;
pub const __GNUCLIKE___OFFSETOF: u32 = 1;
pub const __GNUCLIKE___SECTION: u32 = 1;
pub const __GNUCLIKE_CTOR_SECTION_HANDLING: u32 = 1;
pub const __GNUCLIKE_BUILTIN_CONSTANT_P: u32 = 1;
pub const __GNUCLIKE_BUILTIN_VARARGS: u32 = 1;
pub const __GNUCLIKE_BUILTIN_STDARG: u32 = 1;
pub const __GNUCLIKE_BUILTIN_VAALIST: u32 = 1;
pub const __GNUC_VA_LIST_COMPATIBILITY: u32 = 1;
pub const __GNUCLIKE_BUILTIN_NEXT_ARG: u32 = 1;
pub const __GNUCLIKE_BUILTIN_MEMCPY: u32 = 1;
pub const __CC_SUPPORTS_INLINE: u32 = 1;
pub const __CC_SUPPORTS___INLINE: u32 = 1;
pub const __CC_SUPPORTS___INLINE__: u32 = 1;
pub const __CC_SUPPORTS___FUNC__: u32 = 1;
pub const __CC_SUPPORTS_WARNING: u32 = 1;
pub const __CC_SUPPORTS_VARADIC_XXX: u32 = 1;
pub const __CC_SUPPORTS_DYNAMIC_ARRAY_INIT: u32 = 1;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const RAND_MAX: u32 = 2147483647;
pub const M_MXFAST: u32 = 1;
pub const M_NLBLKS: u32 = 2;
pub const M_GRAIN: u32 = 3;
pub const M_KEEP: u32 = 4;
pub const M_TRIM_THRESHOLD: i32 = -1;
pub const M_TOP_PAD: i32 = -2;
pub const M_MMAP_THRESHOLD: i32 = -3;
pub const M_MMAP_MAX: i32 = -4;
pub const SCREEN_HEIGHT: u32 = 192;
pub const SCREEN_WIDTH: u32 = 256;
pub const VRAM_ENABLE: u32 = 128;
pub const ENABLE_3D: u32 = 8;
pub const DISPLAY_ENABLE_SHIFT: u32 = 8;
pub const DISPLAY_BG0_ACTIVE: u32 = 256;
pub const DISPLAY_BG1_ACTIVE: u32 = 512;
pub const DISPLAY_BG2_ACTIVE: u32 = 1024;
pub const DISPLAY_BG3_ACTIVE: u32 = 2048;
pub const DISPLAY_SPR_ACTIVE: u32 = 4096;
pub const DISPLAY_WIN0_ON: u32 = 8192;
pub const DISPLAY_WIN1_ON: u32 = 16384;
pub const DISPLAY_SPR_WIN_ON: u32 = 32768;
pub const DISPLAY_SPR_HBLANK: u32 = 8388608;
pub const DISPLAY_SPR_1D_LAYOUT: u32 = 16;
pub const DISPLAY_SPR_1D: u32 = 16;
pub const DISPLAY_SPR_2D: u32 = 0;
pub const DISPLAY_SPR_1D_BMP: u32 = 64;
pub const DISPLAY_SPR_2D_BMP_128: u32 = 0;
pub const DISPLAY_SPR_2D_BMP_256: u32 = 32;
pub const DISPLAY_SPR_1D_SIZE_32: u32 = 0;
pub const DISPLAY_SPR_1D_SIZE_64: u32 = 1048576;
pub const DISPLAY_SPR_1D_SIZE_128: u32 = 2097152;
pub const DISPLAY_SPR_1D_SIZE_256: u32 = 3145728;
pub const DISPLAY_SPR_1D_BMP_SIZE_128: u32 = 0;
pub const DISPLAY_SPR_1D_BMP_SIZE_256: u32 = 4194304;
pub const DISPLAY_SPRITE_ATTR_MASK: u32 = 2154823792;
pub const DISPLAY_SPR_EXT_PALETTE: u32 = 2147483648;
pub const DISPLAY_BG_EXT_PALETTE: u32 = 1073741824;
pub const DISPLAY_SCREEN_OFF: u32 = 128;
pub const BLEND_NONE: u32 = 0;
pub const BLEND_ALPHA: u32 = 64;
pub const BLEND_FADE_WHITE: u32 = 128;
pub const BLEND_FADE_BLACK: u32 = 192;
pub const BLEND_SRC_BG0: u32 = 1;
pub const BLEND_SRC_BG1: u32 = 2;
pub const BLEND_SRC_BG2: u32 = 4;
pub const BLEND_SRC_BG3: u32 = 8;
pub const BLEND_SRC_SPRITE: u32 = 16;
pub const BLEND_SRC_BACKDROP: u32 = 32;
pub const BLEND_DST_BG0: u32 = 256;
pub const BLEND_DST_BG1: u32 = 512;
pub const BLEND_DST_BG2: u32 = 1024;
pub const BLEND_DST_BG3: u32 = 2048;
pub const BLEND_DST_SPRITE: u32 = 4096;
pub const BLEND_DST_BACKDROP: u32 = 8192;
pub const DCAP_MODE_A: u32 = 0;
pub const DCAP_MODE_B: u32 = 1;
pub const DCAP_MODE_BLEND: u32 = 2;
pub const DCAP_SRC_A_COMPOSITED: u32 = 0;
pub const DCAP_SRC_A_3DONLY: u32 = 1;
pub const DCAP_SRC_B_VRAM: u32 = 0;
pub const DCAP_SRC_B_DISPFIFO: u32 = 1;
pub const DCAP_SIZE_128x128: u32 = 0;
pub const DCAP_SIZE_256x64: u32 = 1;
pub const DCAP_SIZE_256x128: u32 = 2;
pub const DCAP_SIZE_256x192: u32 = 3;
pub const DCAP_BANK_VRAM_A: u32 = 0;
pub const DCAP_BANK_VRAM_B: u32 = 1;
pub const DCAP_BANK_VRAM_C: u32 = 2;
pub const DCAP_BANK_VRAM_D: u32 = 3;
pub const MAP_BASE_SHIFT: u32 = 8;
pub const TILE_BASE_SHIFT: u32 = 2;
pub const DEGREES_IN_CIRCLE: u32 = 32768;
pub const DIV_64_64: u32 = 2;
pub const DIV_64_32: u32 = 1;
pub const DIV_32_32: u32 = 0;
pub const DIV_BUSY: u32 = 32768;
pub const SQRT_64: u32 = 1;
pub const SQRT_32: u32 = 0;
pub const SQRT_BUSY: u32 = 32768;
pub const LUT_SIZE: u32 = 32768;
pub const LUT_MASK: u32 = 32767;
pub const MAX_TEXTURES: u32 = 2048;
pub const GL_MAX_DEPTH: u32 = 32767;
pub const GL_FALSE: u32 = 0;
pub const GL_TRUE: u32 = 1;
pub const ATTR0_NORMAL: u32 = 0;
pub const ATTR0_ROTSCALE: u32 = 256;
pub const ATTR0_DISABLED: u32 = 512;
pub const ATTR0_ROTSCALE_DOUBLE: u32 = 768;
pub const ATTR0_TYPE_NORMAL: u32 = 0;
pub const ATTR0_TYPE_BLENDED: u32 = 1024;
pub const ATTR0_TYPE_WINDOWED: u32 = 2048;
pub const ATTR0_BMP: u32 = 3072;
pub const ATTR0_MOSAIC: u32 = 4096;
pub const ATTR0_COLOR_16: u32 = 0;
pub const ATTR0_COLOR_256: u32 = 8192;
pub const ATTR0_SQUARE: u32 = 0;
pub const ATTR0_WIDE: u32 = 16384;
pub const ATTR0_TALL: u32 = 32768;
pub const ATTR1_FLIP_X: u32 = 4096;
pub const ATTR1_FLIP_Y: u32 = 8192;
pub const ATTR1_SIZE_8: u32 = 0;
pub const ATTR1_SIZE_16: u32 = 16384;
pub const ATTR1_SIZE_32: u32 = 32768;
pub const ATTR1_SIZE_64: u32 = 49152;
pub const SPRITE_COUNT: u32 = 128;
pub const MATRIX_COUNT: u32 = 32;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _LITTLE_ENDIAN: u32 = 1234;
pub const _BIG_ENDIAN: u32 = 4321;
pub const _PDP_ENDIAN: u32 = 3412;
pub const _BYTE_ORDER: u32 = 1234;
pub const _QUAD_HIGHWORD: u32 = 1;
pub const _QUAD_LOWWORD: u32 = 0;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const FD_SETSIZE: u32 = 64;
pub const SCHED_OTHER: u32 = 0;
pub const SCHED_FIFO: u32 = 1;
pub const SCHED_RR: u32 = 2;
pub const PTHREAD_SCOPE_PROCESS: u32 = 0;
pub const PTHREAD_SCOPE_SYSTEM: u32 = 1;
pub const PTHREAD_INHERIT_SCHED: u32 = 1;
pub const PTHREAD_EXPLICIT_SCHED: u32 = 2;
pub const PTHREAD_CREATE_DETACHED: u32 = 0;
pub const PTHREAD_CREATE_JOINABLE: u32 = 1;
pub const F_ULOCK: u32 = 0;
pub const F_LOCK: u32 = 1;
pub const F_TLOCK: u32 = 2;
pub const F_TEST: u32 = 3;
pub const F_OK: u32 = 0;
pub const R_OK: u32 = 4;
pub const W_OK: u32 = 2;
pub const X_OK: u32 = 1;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const STDIN_FILENO: u32 = 0;
pub const STDOUT_FILENO: u32 = 1;
pub const STDERR_FILENO: u32 = 2;
pub const _SC_ARG_MAX: u32 = 0;
pub const _SC_CHILD_MAX: u32 = 1;
pub const _SC_CLK_TCK: u32 = 2;
pub const _SC_NGROUPS_MAX: u32 = 3;
pub const _SC_OPEN_MAX: u32 = 4;
pub const _SC_JOB_CONTROL: u32 = 5;
pub const _SC_SAVED_IDS: u32 = 6;
pub const _SC_VERSION: u32 = 7;
pub const _SC_PAGESIZE: u32 = 8;
pub const _SC_PAGE_SIZE: u32 = 8;
pub const _SC_NPROCESSORS_CONF: u32 = 9;
pub const _SC_NPROCESSORS_ONLN: u32 = 10;
pub const _SC_PHYS_PAGES: u32 = 11;
pub const _SC_AVPHYS_PAGES: u32 = 12;
pub const _SC_MQ_OPEN_MAX: u32 = 13;
pub const _SC_MQ_PRIO_MAX: u32 = 14;
pub const _SC_RTSIG_MAX: u32 = 15;
pub const _SC_SEM_NSEMS_MAX: u32 = 16;
pub const _SC_SEM_VALUE_MAX: u32 = 17;
pub const _SC_SIGQUEUE_MAX: u32 = 18;
pub const _SC_TIMER_MAX: u32 = 19;
pub const _SC_TZNAME_MAX: u32 = 20;
pub const _SC_ASYNCHRONOUS_IO: u32 = 21;
pub const _SC_FSYNC: u32 = 22;
pub const _SC_MAPPED_FILES: u32 = 23;
pub const _SC_MEMLOCK: u32 = 24;
pub const _SC_MEMLOCK_RANGE: u32 = 25;
pub const _SC_MEMORY_PROTECTION: u32 = 26;
pub const _SC_MESSAGE_PASSING: u32 = 27;
pub const _SC_PRIORITIZED_IO: u32 = 28;
pub const _SC_REALTIME_SIGNALS: u32 = 29;
pub const _SC_SEMAPHORES: u32 = 30;
pub const _SC_SHARED_MEMORY_OBJECTS: u32 = 31;
pub const _SC_SYNCHRONIZED_IO: u32 = 32;
pub const _SC_TIMERS: u32 = 33;
pub const _SC_AIO_LISTIO_MAX: u32 = 34;
pub const _SC_AIO_MAX: u32 = 35;
pub const _SC_AIO_PRIO_DELTA_MAX: u32 = 36;
pub const _SC_DELAYTIMER_MAX: u32 = 37;
pub const _SC_THREAD_KEYS_MAX: u32 = 38;
pub const _SC_THREAD_STACK_MIN: u32 = 39;
pub const _SC_THREAD_THREADS_MAX: u32 = 40;
pub const _SC_TTY_NAME_MAX: u32 = 41;
pub const _SC_THREADS: u32 = 42;
pub const _SC_THREAD_ATTR_STACKADDR: u32 = 43;
pub const _SC_THREAD_ATTR_STACKSIZE: u32 = 44;
pub const _SC_THREAD_PRIORITY_SCHEDULING: u32 = 45;
pub const _SC_THREAD_PRIO_INHERIT: u32 = 46;
pub const _SC_THREAD_PRIO_PROTECT: u32 = 47;
pub const _SC_THREAD_PRIO_CEILING: u32 = 47;
pub const _SC_THREAD_PROCESS_SHARED: u32 = 48;
pub const _SC_THREAD_SAFE_FUNCTIONS: u32 = 49;
pub const _SC_GETGR_R_SIZE_MAX: u32 = 50;
pub const _SC_GETPW_R_SIZE_MAX: u32 = 51;
pub const _SC_LOGIN_NAME_MAX: u32 = 52;
pub const _SC_THREAD_DESTRUCTOR_ITERATIONS: u32 = 53;
pub const _SC_ADVISORY_INFO: u32 = 54;
pub const _SC_ATEXIT_MAX: u32 = 55;
pub const _SC_BARRIERS: u32 = 56;
pub const _SC_BC_BASE_MAX: u32 = 57;
pub const _SC_BC_DIM_MAX: u32 = 58;
pub const _SC_BC_SCALE_MAX: u32 = 59;
pub const _SC_BC_STRING_MAX: u32 = 60;
pub const _SC_CLOCK_SELECTION: u32 = 61;
pub const _SC_COLL_WEIGHTS_MAX: u32 = 62;
pub const _SC_CPUTIME: u32 = 63;
pub const _SC_EXPR_NEST_MAX: u32 = 64;
pub const _SC_HOST_NAME_MAX: u32 = 65;
pub const _SC_IOV_MAX: u32 = 66;
pub const _SC_IPV6: u32 = 67;
pub const _SC_LINE_MAX: u32 = 68;
pub const _SC_MONOTONIC_CLOCK: u32 = 69;
pub const _SC_RAW_SOCKETS: u32 = 70;
pub const _SC_READER_WRITER_LOCKS: u32 = 71;
pub const _SC_REGEXP: u32 = 72;
pub const _SC_RE_DUP_MAX: u32 = 73;
pub const _SC_SHELL: u32 = 74;
pub const _SC_SPAWN: u32 = 75;
pub const _SC_SPIN_LOCKS: u32 = 76;
pub const _SC_SPORADIC_SERVER: u32 = 77;
pub const _SC_SS_REPL_MAX: u32 = 78;
pub const _SC_SYMLOOP_MAX: u32 = 79;
pub const _SC_THREAD_CPUTIME: u32 = 80;
pub const _SC_THREAD_SPORADIC_SERVER: u32 = 81;
pub const _SC_TIMEOUTS: u32 = 82;
pub const _SC_TRACE: u32 = 83;
pub const _SC_TRACE_EVENT_FILTER: u32 = 84;
pub const _SC_TRACE_EVENT_NAME_MAX: u32 = 85;
pub const _SC_TRACE_INHERIT: u32 = 86;
pub const _SC_TRACE_LOG: u32 = 87;
pub const _SC_TRACE_NAME_MAX: u32 = 88;
pub const _SC_TRACE_SYS_MAX: u32 = 89;
pub const _SC_TRACE_USER_EVENT_MAX: u32 = 90;
pub const _SC_TYPED_MEMORY_OBJECTS: u32 = 91;
pub const _SC_V7_ILP32_OFF32: u32 = 92;
pub const _SC_V6_ILP32_OFF32: u32 = 92;
pub const _SC_XBS5_ILP32_OFF32: u32 = 92;
pub const _SC_V7_ILP32_OFFBIG: u32 = 93;
pub const _SC_V6_ILP32_OFFBIG: u32 = 93;
pub const _SC_XBS5_ILP32_OFFBIG: u32 = 93;
pub const _SC_V7_LP64_OFF64: u32 = 94;
pub const _SC_V6_LP64_OFF64: u32 = 94;
pub const _SC_XBS5_LP64_OFF64: u32 = 94;
pub const _SC_V7_LPBIG_OFFBIG: u32 = 95;
pub const _SC_V6_LPBIG_OFFBIG: u32 = 95;
pub const _SC_XBS5_LPBIG_OFFBIG: u32 = 95;
pub const _SC_XOPEN_CRYPT: u32 = 96;
pub const _SC_XOPEN_ENH_I18N: u32 = 97;
pub const _SC_XOPEN_LEGACY: u32 = 98;
pub const _SC_XOPEN_REALTIME: u32 = 99;
pub const _SC_STREAM_MAX: u32 = 100;
pub const _SC_PRIORITY_SCHEDULING: u32 = 101;
pub const _SC_XOPEN_REALTIME_THREADS: u32 = 102;
pub const _SC_XOPEN_SHM: u32 = 103;
pub const _SC_XOPEN_STREAMS: u32 = 104;
pub const _SC_XOPEN_UNIX: u32 = 105;
pub const _SC_XOPEN_VERSION: u32 = 106;
pub const _SC_2_CHAR_TERM: u32 = 107;
pub const _SC_2_C_BIND: u32 = 108;
pub const _SC_2_C_DEV: u32 = 109;
pub const _SC_2_FORT_DEV: u32 = 110;
pub const _SC_2_FORT_RUN: u32 = 111;
pub const _SC_2_LOCALEDEF: u32 = 112;
pub const _SC_2_PBS: u32 = 113;
pub const _SC_2_PBS_ACCOUNTING: u32 = 114;
pub const _SC_2_PBS_CHECKPOINT: u32 = 115;
pub const _SC_2_PBS_LOCATE: u32 = 116;
pub const _SC_2_PBS_MESSAGE: u32 = 117;
pub const _SC_2_PBS_TRACK: u32 = 118;
pub const _SC_2_SW_DEV: u32 = 119;
pub const _SC_2_UPE: u32 = 120;
pub const _SC_2_VERSION: u32 = 121;
pub const _SC_THREAD_ROBUST_PRIO_INHERIT: u32 = 122;
pub const _SC_THREAD_ROBUST_PRIO_PROTECT: u32 = 123;
pub const _SC_XOPEN_UUCP: u32 = 124;
pub const _SC_LEVEL1_ICACHE_SIZE: u32 = 125;
pub const _SC_LEVEL1_ICACHE_ASSOC: u32 = 126;
pub const _SC_LEVEL1_ICACHE_LINESIZE: u32 = 127;
pub const _SC_LEVEL1_DCACHE_SIZE: u32 = 128;
pub const _SC_LEVEL1_DCACHE_ASSOC: u32 = 129;
pub const _SC_LEVEL1_DCACHE_LINESIZE: u32 = 130;
pub const _SC_LEVEL2_CACHE_SIZE: u32 = 131;
pub const _SC_LEVEL2_CACHE_ASSOC: u32 = 132;
pub const _SC_LEVEL2_CACHE_LINESIZE: u32 = 133;
pub const _SC_LEVEL3_CACHE_SIZE: u32 = 134;
pub const _SC_LEVEL3_CACHE_ASSOC: u32 = 135;
pub const _SC_LEVEL3_CACHE_LINESIZE: u32 = 136;
pub const _SC_LEVEL4_CACHE_SIZE: u32 = 137;
pub const _SC_LEVEL4_CACHE_ASSOC: u32 = 138;
pub const _SC_LEVEL4_CACHE_LINESIZE: u32 = 139;
pub const _SC_POSIX_26_VERSION: u32 = 140;
pub const _PC_LINK_MAX: u32 = 0;
pub const _PC_MAX_CANON: u32 = 1;
pub const _PC_MAX_INPUT: u32 = 2;
pub const _PC_NAME_MAX: u32 = 3;
pub const _PC_PATH_MAX: u32 = 4;
pub const _PC_PIPE_BUF: u32 = 5;
pub const _PC_CHOWN_RESTRICTED: u32 = 6;
pub const _PC_NO_TRUNC: u32 = 7;
pub const _PC_VDISABLE: u32 = 8;
pub const _PC_ASYNC_IO: u32 = 9;
pub const _PC_PRIO_IO: u32 = 10;
pub const _PC_SYNC_IO: u32 = 11;
pub const _PC_FILESIZEBITS: u32 = 12;
pub const _PC_2_SYMLINKS: u32 = 13;
pub const _PC_SYMLINK_MAX: u32 = 14;
pub const _PC_ALLOC_SIZE_MIN: u32 = 15;
pub const _PC_REC_INCR_XFER_SIZE: u32 = 16;
pub const _PC_REC_MAX_XFER_SIZE: u32 = 17;
pub const _PC_REC_MIN_XFER_SIZE: u32 = 18;
pub const _PC_REC_XFER_ALIGN: u32 = 19;
pub const _PC_TIMESTAMP_RESOLUTION: u32 = 20;
pub type __int8_t = ::libc::c_schar;
pub type __uint8_t = ::libc::c_uchar;
pub type __int16_t = ::libc::c_short;
pub type __uint16_t = ::libc::c_ushort;
pub type __int32_t = ::libc::c_int;
pub type __uint32_t = ::libc::c_uint;
pub type __int64_t = ::libc::c_longlong;
pub type __uint64_t = ::libc::c_ulonglong;
pub type __int_least8_t = ::libc::c_schar;
pub type __uint_least8_t = ::libc::c_uchar;
pub type __int_least16_t = ::libc::c_short;
pub type __uint_least16_t = ::libc::c_ushort;
pub type __int_least32_t = ::libc::c_int;
pub type __uint_least32_t = ::libc::c_uint;
pub type __int_least64_t = ::libc::c_longlong;
pub type __uint_least64_t = ::libc::c_ulonglong;
pub type __intmax_t = ::libc::c_longlong;
pub type __uintmax_t = ::libc::c_ulonglong;
pub type __intptr_t = ::libc::c_int;
pub type __uintptr_t = ::libc::c_uint;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type int_least8_t = __int_least8_t;
pub type uint_least8_t = __uint_least8_t;
pub type int_least16_t = __int_least16_t;
pub type uint_least16_t = __uint_least16_t;
pub type int_least32_t = __int_least32_t;
pub type uint_least32_t = __uint_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::libc::c_schar;
pub type uint_fast8_t = ::libc::c_uchar;
pub type int_fast16_t = ::libc::c_short;
pub type uint_fast16_t = ::libc::c_ushort;
pub type int_fast32_t = ::libc::c_int;
pub type uint_fast32_t = ::libc::c_uint;
pub type int_fast64_t = ::libc::c_longlong;
pub type uint_fast64_t = ::libc::c_ulonglong;
pub type uint8 = u8;
pub type uint16 = u16;
pub type uint32 = u32;
pub type uint64 = u64;
pub type int8 = i8;
pub type int16 = i16;
pub type int32 = i32;
pub type int64 = i64;
pub type float32 = f32;
pub type float64 = f64;
pub type vuint8 = u8;
pub type vuint16 = u16;
pub type vuint32 = u32;
pub type vuint64 = u64;
pub type vint8 = i8;
pub type vint16 = i16;
pub type vint32 = i32;
pub type vint64 = i64;
pub type vfloat32 = float32;
pub type vfloat64 = float64;
pub type byte = u8;
pub type u8_ = u8;
pub type u16_ = u16;
pub type u32_ = u32;
pub type u64_ = u64;
pub type s8 = i8;
pub type s16 = i16;
pub type s32 = i32;
pub type s64 = i64;
pub type vu8 = u8_;
pub type vu16 = u16_;
pub type vu32 = u32_;
pub type vu64 = u64_;
pub type vs8 = s8;
pub type vs16 = s16;
pub type vs32 = s32;
pub type vs64 = s64;
pub type sec_t = u32;
pub type VoidFn = ::core::option::Option<unsafe extern "C" fn()>;
pub type IntFn = ::core::option::Option<unsafe extern "C" fn()>;
pub type fp = ::core::option::Option<unsafe extern "C" fn()>;
pub type getHeaderCallback = ::core::option::Option<
    unsafe extern "C" fn(source: *mut u8_, dest: *mut u16_, arg: u32_) -> ::libc::c_int,
>;
pub type getResultCallback =
    ::core::option::Option<unsafe extern "C" fn(source: *mut u8_) -> ::libc::c_int>;
pub type getByteCallback = ::core::option::Option<unsafe extern "C" fn(source: *mut u8_) -> u8_>;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct DecompressionStream {
    pub getSize: getHeaderCallback,
    pub getResult: getResultCallback,
    pub readByte: getByteCallback,
}
pub type TDecompressionStream = DecompressionStream;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct UnpackStruct {
    pub sourceSize: uint16,
    pub sourceWidth: uint8,
    pub destWidth: uint8,
    pub dataOffset: uint32,
}
pub type TUnpackStruct = UnpackStruct;
pub type PUnpackStruct = *mut UnpackStruct;
extern "C" {
    pub fn swiSoftReset();
}
extern "C" {
    pub fn swiDelay(duration: uint32);
}
extern "C" {
    pub fn swiDivide(numerator: ::libc::c_int, divisor: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn swiRemainder(numerator: ::libc::c_int, divisor: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn swiDivMod(
        numerator: ::libc::c_int,
        divisor: ::libc::c_int,
        result: *mut ::libc::c_int,
        remainder: *mut ::libc::c_int,
    );
}
extern "C" {
    pub fn swiCopy(source: *const ::libc::c_void, dest: *mut ::libc::c_void, flags: ::libc::c_int);
}
extern "C" {
    pub fn swiFastCopy(
        source: *const ::libc::c_void,
        dest: *mut ::libc::c_void,
        flags: ::libc::c_int,
    );
}
extern "C" {
    pub fn swiSqrt(value: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn swiCRC16(crc: uint16, data: *mut ::libc::c_void, size: uint32) -> uint16;
}
extern "C" {
    pub fn swiIsDebugger() -> ::libc::c_int;
}
extern "C" {
    pub fn swiUnpackBits(source: *mut uint8, destination: *mut uint32, params: PUnpackStruct);
}
extern "C" {
    pub fn swiDecompressLZSSWram(source: *mut ::libc::c_void, destination: *mut ::libc::c_void);
}
extern "C" {
    pub fn swiDecompressLZSSVram(
        source: *mut ::libc::c_void,
        destination: *mut ::libc::c_void,
        toGetSize: uint32,
        stream: *mut TDecompressionStream,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn swiDecompressLZSSVramNTR(
        source: *mut ::libc::c_void,
        destination: *mut ::libc::c_void,
        toGetSize: uint32,
        stream: *mut TDecompressionStream,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn swiDecompressLZSSVramTWL(
        source: *mut ::libc::c_void,
        destination: *mut ::libc::c_void,
        toGetSize: uint32,
        stream: *mut TDecompressionStream,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn swiDecompressHuffman(
        source: *mut ::libc::c_void,
        destination: *mut ::libc::c_void,
        toGetSize: uint32,
        stream: *mut TDecompressionStream,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn swiDecompressRLEWram(source: *mut ::libc::c_void, destination: *mut ::libc::c_void);
}
extern "C" {
    pub fn swiDecompressRLEVram(
        source: *mut ::libc::c_void,
        destination: *mut ::libc::c_void,
        toGetSize: uint32,
        stream: *mut TDecompressionStream,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn swiWaitForIRQ();
}
extern "C" {
    pub fn swiSetHaltCR(data: uint32);
}
extern "C" {
    pub fn swiDecodeDelta8(source: *mut ::libc::c_void, destination: *mut ::libc::c_void);
}
extern "C" {
    pub fn swiDecodeDelta16(source: *mut ::libc::c_void, destination: *mut ::libc::c_void);
}
extern "C" {
    pub fn enableSlot1();
}
extern "C" {
    pub fn disableSlot1();
}
extern "C" {
    pub fn cardWriteCommand(command: *const u8_);
}
extern "C" {
    pub fn cardPolledTransfer(
        flags: u32_,
        destination: *mut u32_,
        length: u32_,
        command: *const u8_,
    );
}
extern "C" {
    pub fn cardStartTransfer(
        command: *const u8_,
        destination: *mut u32_,
        channel: ::libc::c_int,
        flags: u32_,
    );
}
extern "C" {
    pub fn cardWriteAndRead(command: *const u8_, flags: u32_) -> uint32;
}
extern "C" {
    pub fn cardParamCommand(
        command: u8_,
        parameter: u32_,
        flags: u32_,
        destination: *mut u32_,
        length: u32_,
    );
}
extern "C" {
    pub fn cardReadHeader(header: *mut u8_);
}
extern "C" {
    pub fn cardReadID(flags: u32_) -> u32_;
}
extern "C" {
    pub fn cardReset();
}
extern "C" {
    pub fn cardReadEeprom(address: u32_, data: *mut u8_, length: u32_, addrtype: u32_);
}
extern "C" {
    pub fn cardWriteEeprom(address: u32_, data: *mut u8_, length: u32_, addrtype: u32_);
}
extern "C" {
    pub fn cardEepromReadID() -> u32_;
}
extern "C" {
    pub fn cardEepromCommand(command: u8_) -> u8_;
}
extern "C" {
    pub fn cardEepromGetType() -> ::libc::c_int;
}
extern "C" {
    pub fn cardEepromGetSize() -> u32_;
}
extern "C" {
    pub fn cardEepromChipErase();
}
extern "C" {
    pub fn cardEepromSectorErase(address: u32_);
}
extern "C" {
    pub fn nocashWrite(message: *const ::libc::c_char, len: ::libc::c_int);
}
extern "C" {
    pub fn nocashMessage(message: *const ::libc::c_char);
}
pub const IRQ_VBLANK: IRQ_MASKS = 1;
pub const IRQ_HBLANK: IRQ_MASKS = 2;
pub const IRQ_VCOUNT: IRQ_MASKS = 4;
pub const IRQ_TIMER0: IRQ_MASKS = 8;
pub const IRQ_TIMER1: IRQ_MASKS = 16;
pub const IRQ_TIMER2: IRQ_MASKS = 32;
pub const IRQ_TIMER3: IRQ_MASKS = 64;
pub const IRQ_NETWORK: IRQ_MASKS = 128;
pub const IRQ_DMA0: IRQ_MASKS = 256;
pub const IRQ_DMA1: IRQ_MASKS = 512;
pub const IRQ_DMA2: IRQ_MASKS = 1024;
pub const IRQ_DMA3: IRQ_MASKS = 2048;
pub const IRQ_KEYS: IRQ_MASKS = 4096;
pub const IRQ_CART: IRQ_MASKS = 8192;
pub const IRQ_IPC_SYNC: IRQ_MASKS = 65536;
pub const IRQ_FIFO_EMPTY: IRQ_MASKS = 131072;
pub const IRQ_FIFO_NOT_EMPTY: IRQ_MASKS = 262144;
pub const IRQ_CARD: IRQ_MASKS = 524288;
pub const IRQ_CARD_LINE: IRQ_MASKS = 1048576;
pub const IRQ_GEOMETRY_FIFO: IRQ_MASKS = 2097152;
pub const IRQ_LID: IRQ_MASKS = 4194304;
pub const IRQ_SPI: IRQ_MASKS = 8388608;
pub const IRQ_WIFI: IRQ_MASKS = 16777216;
pub const IRQ_ALL: IRQ_MASKS = -1;
pub type IRQ_MASKS = ::libc::c_int;
pub use self::IRQ_MASKS as IRQ_MASK;
pub const IRQ_I2C: IRQ_MASKSAUX = 64;
pub const IRQ_SDMMC: IRQ_MASKSAUX = 256;
pub type IRQ_MASKSAUX = ::libc::c_uint;
pub const IME_DISABLE: IME_VALUE = 0;
pub const IME_ENABLE: IME_VALUE = 1;
pub type IME_VALUE = ::libc::c_uint;
extern "C" {
    pub static mut __irq_vector: [VoidFn; 0usize];
}
extern "C" {
    pub static mut __irq_flags: [vuint32; 0usize];
}
extern "C" {
    pub static mut __irq_flagsaux: [vuint32; 0usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IntTable {
    pub handler: IntFn,
    pub mask: u32_,
}
extern "C" {
    pub fn irqInit();
}
extern "C" {
    pub fn irqSet(irq: u32_, handler: VoidFn);
}
extern "C" {
    pub fn irqSetAUX(irq: u32_, handler: VoidFn);
}
extern "C" {
    pub fn irqClear(irq: u32_);
}
extern "C" {
    pub fn irqClearAUX(irq: u32_);
}
extern "C" {
    pub fn irqInitHandler(handler: VoidFn);
}
extern "C" {
    pub fn irqEnable(irq: u32_);
}
extern "C" {
    pub fn irqEnableAUX(irq: u32_);
}
extern "C" {
    pub fn irqDisable(irq: u32_);
}
extern "C" {
    pub fn irqDisableAUX(irq: u32_);
}
extern "C" {
    pub fn swiIntrWait(waitForSet: u32_, flags: uint32);
}
extern "C" {
    pub fn swiWaitForVBlank();
}
extern "C" {
    pub fn setPowerButtonCB(CB: VoidFn) -> VoidFn;
}
pub const IPC_SYNC_IRQ_ENABLE: IPC_SYNC_BITS = 16384;
pub const IPC_SYNC_IRQ_REQUEST: IPC_SYNC_BITS = 8192;
pub type IPC_SYNC_BITS = ::libc::c_uint;
pub const IPC_FIFO_SEND_EMPTY: IPC_CONTROL_BITS = 1;
pub const IPC_FIFO_SEND_FULL: IPC_CONTROL_BITS = 2;
pub const IPC_FIFO_SEND_IRQ: IPC_CONTROL_BITS = 4;
pub const IPC_FIFO_SEND_CLEAR: IPC_CONTROL_BITS = 8;
pub const IPC_FIFO_RECV_EMPTY: IPC_CONTROL_BITS = 256;
pub const IPC_FIFO_RECV_FULL: IPC_CONTROL_BITS = 512;
pub const IPC_FIFO_RECV_IRQ: IPC_CONTROL_BITS = 1024;
pub const IPC_FIFO_ERROR: IPC_CONTROL_BITS = 16384;
pub const IPC_FIFO_ENABLE: IPC_CONTROL_BITS = 32768;
pub type IPC_CONTROL_BITS = ::libc::c_uint;
extern "C" {
    pub fn __assert(arg1: *const ::libc::c_char, arg2: ::libc::c_int, arg3: *const ::libc::c_char);
}
extern "C" {
    pub fn __assert_func(
        arg1: *const ::libc::c_char,
        arg2: ::libc::c_int,
        arg3: *const ::libc::c_char,
        arg4: *const ::libc::c_char,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sGBAHeader {
    pub entryPoint: u32_,
    pub logo: [u8_; 156usize],
    pub title: [::libc::c_char; 12usize],
    pub gamecode: [::libc::c_char; 4usize],
    pub makercode: u16_,
    pub is96h: u8_,
    pub unitcode: u8_,
    pub devicecode: u8_,
    pub unused: [u8_; 7usize],
    pub version: u8_,
    pub complement: u8_,
    pub checksum: u16_,
}
pub type tGBAHeader = sGBAHeader;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sNDSHeader {
    pub gameTitle: [::libc::c_char; 12usize],
    pub gameCode: [::libc::c_char; 4usize],
    pub makercode: [::libc::c_char; 2usize],
    pub unitCode: u8_,
    pub deviceType: u8_,
    pub deviceSize: u8_,
    pub reserved1: [u8_; 9usize],
    pub romversion: u8_,
    pub flags: u8_,
    pub arm9romOffset: u32_,
    pub arm9executeAddress: *mut ::libc::c_void,
    pub arm9destination: *mut ::libc::c_void,
    pub arm9binarySize: u32_,
    pub arm7romOffset: u32_,
    pub arm7executeAddress: *mut ::libc::c_void,
    pub arm7destination: *mut ::libc::c_void,
    pub arm7binarySize: u32_,
    pub filenameOffset: u32_,
    pub filenameSize: u32_,
    pub fatOffset: u32_,
    pub fatSize: u32_,
    pub arm9overlaySource: u32_,
    pub arm9overlaySize: u32_,
    pub arm7overlaySource: u32_,
    pub arm7overlaySize: u32_,
    pub cardControl13: u32_,
    pub cardControlBF: u32_,
    pub bannerOffset: u32_,
    pub secureCRC16: u16_,
    pub readTimeout: u16_,
    pub unknownRAM1: u32_,
    pub unknownRAM2: u32_,
    pub bfPrime1: u32_,
    pub bfPrime2: u32_,
    pub romSize: u32_,
    pub headerSize: u32_,
    pub zeros88: [u32_; 14usize],
    pub gbaLogo: [u8_; 156usize],
    pub logoCRC16: u16_,
    pub headerCRC16: u16_,
}
pub type tNDSHeader = sNDSHeader;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __DSiHeader {
    pub ndshdr: tNDSHeader,
    pub debugRomSource: u32_,
    pub debugRomSize: u32_,
    pub debugRomDestination: u32_,
    pub offset_0x16C: u32_,
    pub zero: [u8_; 16usize],
    pub global_mbk_setting: [[u8_; 4usize]; 5usize],
    pub arm9_mbk_setting: [u32_; 3usize],
    pub arm7_mbk_setting: [u32_; 3usize],
    pub mbk9_wramcnt_setting: u32_,
    pub region_flags: u32_,
    pub access_control: u32_,
    pub scfg_ext_mask: u32_,
    pub offset_0x1BC: [u8_; 3usize],
    pub appflags: u8_,
    pub arm9iromOffset: *mut ::libc::c_void,
    pub offset_0x1C4: u32_,
    pub arm9idestination: *mut ::libc::c_void,
    pub arm9ibinarySize: u32_,
    pub arm7iromOffset: *mut ::libc::c_void,
    pub offset_0x1D4: u32_,
    pub arm7idestination: *mut ::libc::c_void,
    pub arm7ibinarySize: u32_,
    pub digest_ntr_start: u32_,
    pub digest_ntr_size: u32_,
    pub digest_twl_start: u32_,
    pub digest_twl_size: u32_,
    pub sector_hashtable_start: u32_,
    pub sector_hashtable_size: u32_,
    pub block_hashtable_start: u32_,
    pub block_hashtable_size: u32_,
    pub digest_sector_size: u32_,
    pub digest_block_sectorcount: u32_,
    pub banner_size: u32_,
    pub offset_0x20C: u32_,
    pub total_rom_size: u32_,
    pub offset_0x214: u32_,
    pub offset_0x218: u32_,
    pub offset_0x21C: u32_,
    pub modcrypt1_start: u32_,
    pub modcrypt1_size: u32_,
    pub modcrypt2_start: u32_,
    pub modcrypt2_size: u32_,
    pub tid_low: u32_,
    pub tid_high: u32_,
    pub public_sav_size: u32_,
    pub private_sav_size: u32_,
    pub reserved3: [u8_; 176usize],
    pub age_ratings: [u8_; 16usize],
    pub hmac_arm9: [u8_; 20usize],
    pub hmac_arm7: [u8_; 20usize],
    pub hmac_digest_master: [u8_; 20usize],
    pub hmac_icon_title: [u8_; 20usize],
    pub hmac_arm9i: [u8_; 20usize],
    pub hmac_arm7i: [u8_; 20usize],
    pub reserved4: [u8_; 40usize],
    pub hmac_arm9_no_secure: [u8_; 20usize],
    pub reserved5: [u8_; 2636usize],
    pub debug_args: [u8_; 384usize],
    pub rsa_signature: [u8_; 128usize],
}
pub type tDSiHeader = __DSiHeader;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sNDSBanner {
    pub version: u16_,
    pub crc: u16_,
    pub reserved: [u8_; 28usize],
    pub icon: [u8_; 512usize],
    pub palette: [u16_; 16usize],
    pub titles: [[u16_; 128usize]; 6usize],
}
pub type tNDSBanner = sNDSBanner;
pub const DISP_IN_VBLANK: DISP_BITS = 1;
pub const DISP_IN_HBLANK: DISP_BITS = 2;
pub const DISP_YTRIGGERED: DISP_BITS = 4;
pub const DISP_VBLANK_IRQ: DISP_BITS = 8;
pub const DISP_HBLANK_IRQ: DISP_BITS = 16;
pub const DISP_YTRIGGER_IRQ: DISP_BITS = 32;
pub type DISP_BITS = ::libc::c_uint;
pub const PM_SOUND_AMP: PM_Bits = 1;
pub const PM_SOUND_MUTE: PM_Bits = 2;
pub const PM_BACKLIGHT_BOTTOM: PM_Bits = 4;
pub const PM_BACKLIGHT_TOP: PM_Bits = 8;
pub const PM_SYSTEM_PWR: PM_Bits = 64;
pub const POWER_LCD: PM_Bits = 65537;
pub const POWER_2D_A: PM_Bits = 65538;
pub const POWER_MATRIX: PM_Bits = 65540;
pub const POWER_3D_CORE: PM_Bits = 65544;
pub const POWER_2D_B: PM_Bits = 66048;
pub const POWER_SWAP_LCDS: PM_Bits = 98304;
pub const POWER_ALL_2D: PM_Bits = 66051;
pub const POWER_ALL: PM_Bits = 66063;
pub type PM_Bits = ::libc::c_uint;
extern "C" {
    pub fn systemSleep();
}
extern "C" {
    pub fn ledBlink(bm: ::libc::c_int);
}
extern "C" {
    pub fn powerOn(bits: ::libc::c_int);
}
extern "C" {
    pub fn powerOff(bits: ::libc::c_int);
}
extern "C" {
    pub fn systemMsgHandler(bytes: ::libc::c_int, user_data: *mut ::libc::c_void);
}
extern "C" {
    pub fn systemValueHandler(value: u32_, data: *mut ::libc::c_void);
}
extern "C" {
    pub fn readFirmware(address: u32_, buffer: *mut ::libc::c_void, length: u32_);
}
extern "C" {
    pub fn writeFirmware(address: u32_, buffer: *mut ::libc::c_void, length: u32_)
        -> ::libc::c_int;
}
extern "C" {
    pub fn getBatteryLevel() -> u32_;
}
extern "C" {
    pub fn setVectorBase(highVector: ::libc::c_int);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sysVectors_t {
    pub reset: VoidFn,
    pub undefined: VoidFn,
    pub swi: VoidFn,
    pub prefetch_abort: VoidFn,
    pub data_abort: VoidFn,
    pub fiq: VoidFn,
}
pub type sysVectors = sysVectors_t;
extern "C" {
    pub static mut SystemVectors: sysVectors;
}
extern "C" {
    pub fn setSDcallback(
        callback: ::core::option::Option<unsafe extern "C" fn(arg1: ::libc::c_int)>,
    );
}
extern "C" {
    pub fn setCpuClock(speed: bool) -> bool;
}
extern "C" {
    pub fn getHeapStart() -> *mut u8_;
}
extern "C" {
    pub fn getHeapEnd() -> *mut u8_;
}
extern "C" {
    pub fn getHeapLimit() -> *mut u8_;
}
pub const BACKLIGHT_LOW: BACKLIGHT_LEVELS = 0;
pub const BACKLIGHT_MED: BACKLIGHT_LEVELS = 1;
pub const BACKLIGHT_HIGH: BACKLIGHT_LEVELS = 2;
pub const BACKLIGHT_MAX: BACKLIGHT_LEVELS = 3;
pub type BACKLIGHT_LEVELS = ::libc::c_uint;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct tPERSONAL_DATA {
    pub RESERVED0: [u8_; 2usize],
    pub theme: u8_,
    pub birthMonth: u8_,
    pub birthDay: u8_,
    pub RESERVED1: [u8_; 1usize],
    pub name: [s16; 10usize],
    pub nameLen: u16_,
    pub message: [s16; 26usize],
    pub messageLen: u16_,
    pub alarmHour: u8_,
    pub alarmMinute: u8_,
    pub RESERVED2: [u8_; 4usize],
    pub calX1: u16_,
    pub calY1: u16_,
    pub calX1px: u8_,
    pub calY1px: u8_,
    pub calX2: u16_,
    pub calY2: u16_,
    pub calX2px: u8_,
    pub calY2px: u8_,
    pub __bindgen_anon_1: tPERSONAL_DATA__bindgen_ty_1,
    pub RESERVED3: u16_,
    pub rtcOffset: u32_,
    pub RESERVED4: u32_,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct tPERSONAL_DATA__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
impl tPERSONAL_DATA__bindgen_ty_1 {
    #[inline]
    pub fn language(&self) -> ::libc::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_language(&mut self, val: ::libc::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn gbaScreen(&self) -> ::libc::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_gbaScreen(&mut self, val: ::libc::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn defaultBrightness(&self) -> ::libc::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_defaultBrightness(&mut self, val: ::libc::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn autoMode(&self) -> ::libc::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_autoMode(&mut self, val: ::libc::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn RESERVED5(&self) -> ::libc::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_RESERVED5(&mut self, val: ::libc::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn settingsLost(&self) -> ::libc::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_settingsLost(&mut self, val: ::libc::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn RESERVED6(&self) -> ::libc::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_RESERVED6(&mut self, val: ::libc::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        language: ::libc::c_uint,
        gbaScreen: ::libc::c_uint,
        defaultBrightness: ::libc::c_uint,
        autoMode: ::libc::c_uint,
        RESERVED5: ::libc::c_uint,
        settingsLost: ::libc::c_uint,
        RESERVED6: ::libc::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 3u8, {
            let language: u32 = unsafe { ::core::mem::transmute(language) };
            language as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let gbaScreen: u32 = unsafe { ::core::mem::transmute(gbaScreen) };
            gbaScreen as u64
        });
        __bindgen_bitfield_unit.set(4usize, 2u8, {
            let defaultBrightness: u32 = unsafe { ::core::mem::transmute(defaultBrightness) };
            defaultBrightness as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let autoMode: u32 = unsafe { ::core::mem::transmute(autoMode) };
            autoMode as u64
        });
        __bindgen_bitfield_unit.set(7usize, 2u8, {
            let RESERVED5: u32 = unsafe { ::core::mem::transmute(RESERVED5) };
            RESERVED5 as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let settingsLost: u32 = unsafe { ::core::mem::transmute(settingsLost) };
            settingsLost as u64
        });
        __bindgen_bitfield_unit.set(10usize, 6u8, {
            let RESERVED6: u32 = unsafe { ::core::mem::transmute(RESERVED6) };
            RESERVED6 as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type PERSONAL_DATA = tPERSONAL_DATA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTCtime {
    pub year: u8_,
    pub month: u8_,
    pub day: u8_,
    pub weekday: u8_,
    pub hours: u8_,
    pub minutes: u8_,
    pub seconds: u8_,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __argv {
    pub argvMagic: ::libc::c_int,
    pub commandLine: *mut ::libc::c_char,
    pub length: ::libc::c_int,
    pub argc: ::libc::c_int,
    pub argv: *mut *mut ::libc::c_char,
    pub dummy: ::libc::c_int,
    pub host: u32_,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __bootstub {
    pub bootsig: u64_,
    pub arm9reboot: VoidFn,
    pub arm7reboot: VoidFn,
    pub bootsize: u32_,
}
extern "C" {
    pub fn memCached(address: *mut ::libc::c_void) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn memUncached(address: *mut ::libc::c_void) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn resetARM7(address: u32_);
}
pub const ClockDivider_1: ClockDivider = 0;
pub const ClockDivider_64: ClockDivider = 1;
pub const ClockDivider_256: ClockDivider = 2;
pub const ClockDivider_1024: ClockDivider = 3;
pub type ClockDivider = ::libc::c_uint;
extern "C" {
    pub fn timerStart(timer: ::libc::c_int, divider: ClockDivider, ticks: u16_, callback: VoidFn);
}
extern "C" {
    pub fn timerElapsed(timer: ::libc::c_int) -> u16_;
}
extern "C" {
    pub fn timerPause(timer: ::libc::c_int) -> u16_;
}
extern "C" {
    pub fn timerStop(timer: ::libc::c_int) -> u16_;
}
extern "C" {
    pub fn cpuStartTiming(timer: ::libc::c_int);
}
extern "C" {
    pub fn cpuGetTiming() -> u32_;
}
extern "C" {
    pub fn cpuEndTiming() -> u32_;
}
pub const FIFO_PM: FifoChannels = 0;
pub const FIFO_SOUND: FifoChannels = 1;
pub const FIFO_SYSTEM: FifoChannels = 2;
pub const FIFO_MAXMOD: FifoChannels = 3;
pub const FIFO_DSWIFI: FifoChannels = 4;
pub const FIFO_SDMMC: FifoChannels = 5;
pub const FIFO_FIRMWARE: FifoChannels = 6;
pub const FIFO_RSVD_01: FifoChannels = 7;
pub const FIFO_USER_01: FifoChannels = 8;
pub const FIFO_USER_02: FifoChannels = 9;
pub const FIFO_USER_03: FifoChannels = 10;
pub const FIFO_USER_04: FifoChannels = 11;
pub const FIFO_USER_05: FifoChannels = 12;
pub const FIFO_USER_06: FifoChannels = 13;
pub const FIFO_USER_07: FifoChannels = 14;
pub const FIFO_USER_08: FifoChannels = 15;
pub type FifoChannels = ::libc::c_uint;
pub const SOUND_SET_PAN: FifoSoundCommand = 0;
pub const SOUND_SET_VOLUME: FifoSoundCommand = 1048576;
pub const SOUND_SET_FREQ: FifoSoundCommand = 2097152;
pub const SOUND_SET_WAVEDUTY: FifoSoundCommand = 3145728;
pub const SOUND_MASTER_ENABLE: FifoSoundCommand = 4194304;
pub const SOUND_MASTER_DISABLE: FifoSoundCommand = 5242880;
pub const SOUND_PAUSE: FifoSoundCommand = 6291456;
pub const SOUND_RESUME: FifoSoundCommand = 7340032;
pub const SOUND_KILL: FifoSoundCommand = 8388608;
pub const SOUND_SET_MASTER_VOL: FifoSoundCommand = 9437184;
pub const MIC_STOP: FifoSoundCommand = 10485760;
pub type FifoSoundCommand = ::libc::c_uint;
pub const SYS_REQ_TOUCH: FifoSystemCommands = 0;
pub const SYS_REQ_KEYS: FifoSystemCommands = 1;
pub const SYS_REQ_TIME: FifoSystemCommands = 2;
pub const SYS_SET_TIME: FifoSystemCommands = 3;
pub const SDMMC_INSERT: FifoSystemCommands = 4;
pub const SDMMC_REMOVE: FifoSystemCommands = 5;
pub type FifoSystemCommands = ::libc::c_uint;
pub const SDMMC_HAVE_SD: FifoSdmmcCommands = 0;
pub const SDMMC_SD_START: FifoSdmmcCommands = 1;
pub const SDMMC_SD_IS_INSERTED: FifoSdmmcCommands = 2;
pub const SDMMC_SD_STOP: FifoSdmmcCommands = 3;
pub const SDMMC_NAND_START: FifoSdmmcCommands = 4;
pub const SDMMC_NAND_STOP: FifoSdmmcCommands = 5;
pub const SDMMC_NAND_SIZE: FifoSdmmcCommands = 6;
pub type FifoSdmmcCommands = ::libc::c_uint;
pub const FW_READ: FifoFirmwareCommands = 0;
pub const FW_WRITE: FifoFirmwareCommands = 1;
pub type FifoFirmwareCommands = ::libc::c_uint;
pub const PM_REQ_ON: FifoPMCommands = 65536;
pub const PM_REQ_OFF: FifoPMCommands = 131072;
pub const PM_REQ_LED: FifoPMCommands = 196608;
pub const PM_REQ_SLEEP: FifoPMCommands = 262144;
pub const PM_REQ_SLEEP_DISABLE: FifoPMCommands = 327680;
pub const PM_REQ_SLEEP_ENABLE: FifoPMCommands = 393216;
pub const PM_REQ_BATTERY: FifoPMCommands = 458752;
pub const PM_REQ_SLOT1_DISABLE: FifoPMCommands = 524288;
pub const PM_REQ_SLOT1_ENABLE: FifoPMCommands = 589824;
pub type FifoPMCommands = ::libc::c_uint;
pub const WIFI_ENABLE: FifoWifiCommands = 0;
pub const WIFI_DISABLE: FifoWifiCommands = 1;
pub const WIFI_SYNC: FifoWifiCommands = 2;
pub const WIFI_STARTUP: FifoWifiCommands = 3;
pub type FifoWifiCommands = ::libc::c_uint;
pub const PM_LED_ON: PM_LedBlinkMode = 0;
pub const PM_LED_SLEEP: PM_LedBlinkMode = 1;
pub const PM_LED_BLINK: PM_LedBlinkMode = 3;
pub type PM_LedBlinkMode = ::libc::c_uint;
pub type FifoAddressHandlerFunc = ::core::option::Option<
    unsafe extern "C" fn(address: *mut ::libc::c_void, userdata: *mut ::libc::c_void),
>;
pub type FifoValue32HandlerFunc =
    ::core::option::Option<unsafe extern "C" fn(value32: u32_, userdata: *mut ::libc::c_void)>;
pub type FifoDatamsgHandlerFunc = ::core::option::Option<
    unsafe extern "C" fn(num_bytes: ::libc::c_int, userdata: *mut ::libc::c_void),
>;
extern "C" {
    pub fn fifoInit() -> bool;
}
extern "C" {
    pub fn fifoSendAddress(channel: ::libc::c_int, address: *mut ::libc::c_void) -> bool;
}
extern "C" {
    pub fn fifoSendValue32(channel: ::libc::c_int, value32: u32_) -> bool;
}
extern "C" {
    pub fn fifoSendDatamsg(
        channel: ::libc::c_int,
        num_bytes: ::libc::c_int,
        data_array: *mut u8_,
    ) -> bool;
}
extern "C" {
    pub fn fifoSetAddressHandler(
        channel: ::libc::c_int,
        newhandler: FifoAddressHandlerFunc,
        userdata: *mut ::libc::c_void,
    ) -> bool;
}
extern "C" {
    pub fn fifoSetValue32Handler(
        channel: ::libc::c_int,
        newhandler: FifoValue32HandlerFunc,
        userdata: *mut ::libc::c_void,
    ) -> bool;
}
extern "C" {
    pub fn fifoSetDatamsgHandler(
        channel: ::libc::c_int,
        newhandler: FifoDatamsgHandlerFunc,
        userdata: *mut ::libc::c_void,
    ) -> bool;
}
extern "C" {
    pub fn fifoCheckAddress(channel: ::libc::c_int) -> bool;
}
extern "C" {
    pub fn fifoCheckValue32(channel: ::libc::c_int) -> bool;
}
extern "C" {
    pub fn fifoCheckDatamsg(channel: ::libc::c_int) -> bool;
}
extern "C" {
    pub fn fifoCheckDatamsgLength(channel: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn fifoGetAddress(channel: ::libc::c_int) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn fifoGetValue32(channel: ::libc::c_int) -> u32_;
}
extern "C" {
    pub fn fifoGetDatamsg(
        channel: ::libc::c_int,
        buffersize: ::libc::c_int,
        destbuffer: *mut u8_,
    ) -> ::libc::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct touchPosition {
    pub rawx: u16_,
    pub rawy: u16_,
    pub px: u16_,
    pub py: u16_,
    pub z1: u16_,
    pub z2: u16_,
}
pub const KEY_A: KEYPAD_BITS = 1;
pub const KEY_B: KEYPAD_BITS = 2;
pub const KEY_SELECT: KEYPAD_BITS = 4;
pub const KEY_START: KEYPAD_BITS = 8;
pub const KEY_RIGHT: KEYPAD_BITS = 16;
pub const KEY_LEFT: KEYPAD_BITS = 32;
pub const KEY_UP: KEYPAD_BITS = 64;
pub const KEY_DOWN: KEYPAD_BITS = 128;
pub const KEY_R: KEYPAD_BITS = 256;
pub const KEY_L: KEYPAD_BITS = 512;
pub const KEY_X: KEYPAD_BITS = 1024;
pub const KEY_Y: KEYPAD_BITS = 2048;
pub const KEY_TOUCH: KEYPAD_BITS = 4096;
pub const KEY_LID: KEYPAD_BITS = 8192;
pub type KEYPAD_BITS = ::libc::c_uint;
pub type size_t = ::libc::c_uint;
pub type wchar_t = ::libc::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::libc::c_longlong,
    pub __clang_max_align_nonce2: f64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct swiSHA1context {
    pub state: [u32_; 5usize],
    pub total: [u32_; 2usize],
    pub buffer: [u8_; 64usize],
    pub fragment_size: u32_,
    pub sha_block: ::core::option::Option<
        unsafe extern "C" fn(ctx: *mut swiSHA1context, src: *const ::libc::c_void, len: size_t),
    >,
}
pub type swiSHA1context_t = swiSHA1context;
extern "C" {
    pub fn swiSHA1Init(ctx: *mut swiSHA1context_t);
}
extern "C" {
    pub fn swiSHA1Update(ctx: *mut swiSHA1context_t, data: *const ::libc::c_void, len: size_t);
}
extern "C" {
    pub fn swiSHA1Final(digest: *mut ::libc::c_void, ctx: *mut swiSHA1context_t);
}
extern "C" {
    pub fn swiSHA1Calc(digest: *mut ::libc::c_void, data: *const ::libc::c_void, len: size_t);
}
extern "C" {
    pub fn swiSHA1Verify(digest1: *const ::libc::c_void, digest2: *const ::libc::c_void);
}
pub type wint_t = ::libc::c_int;
pub type _off_t = __int64_t;
pub type _fpos_t = __int64_t;
pub type __ino_t = __uint32_t;
pub type __dev_t = __uint32_t;
pub type __blkcnt_t = ::libc::c_long;
pub type __blksize_t = ::libc::c_long;
pub type __fsblkcnt_t = __uint64_t;
pub type __fsfilcnt_t = __uint32_t;
pub type __pid_t = ::libc::c_int;
pub type __uid_t = ::libc::c_ushort;
pub type __gid_t = ::libc::c_ushort;
pub type __id_t = __uint32_t;
pub type __mode_t = __uint32_t;
pub type _off64_t = ::libc::c_longlong;
pub type __off_t = _off_t;
pub type __loff_t = _off64_t;
pub type __key_t = ::libc::c_long;
pub type __size_t = ::libc::c_uint;
pub type _ssize_t = ::libc::c_int;
pub type __ssize_t = _ssize_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _mbstate_t {
    pub __count: ::libc::c_int,
    pub __value: _mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _mbstate_t__bindgen_ty_1 {
    pub __wch: wint_t,
    pub __wchb: [::libc::c_uchar; 4usize],
    _bindgen_union_align: u32,
}
pub type _iconv_t = *mut ::libc::c_void;
pub type __clock_t = ::libc::c_ulong;
pub type __time_t = __int_least64_t;
pub type __clockid_t = ::libc::c_ulong;
pub type __timer_t = ::libc::c_ulong;
pub type __sa_family_t = __uint8_t;
pub type __socklen_t = __uint32_t;
pub type __nl_item = ::libc::c_int;
pub type __nlink_t = ::libc::c_ushort;
pub type __suseconds_t = ::libc::c_long;
pub type __useconds_t = ::libc::c_ulong;
pub type __ULong = ::libc::c_ulong;
pub type _LOCK_T = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __lock_t {
    pub lock: _LOCK_T,
    pub thread_tag: u32,
    pub counter: u32,
}
pub type _LOCK_RECURSIVE_T = __lock_t;
extern "C" {
    pub fn __libc_lock_init(lock: *mut _LOCK_T);
}
extern "C" {
    pub fn __libc_lock_init_recursive(lock: *mut _LOCK_RECURSIVE_T);
}
extern "C" {
    pub fn __libc_lock_close(lock: *mut _LOCK_T);
}
extern "C" {
    pub fn __libc_lock_close_recursive(lock: *mut _LOCK_RECURSIVE_T);
}
extern "C" {
    pub fn __libc_lock_acquire(lock: *mut _LOCK_T);
}
extern "C" {
    pub fn __libc_lock_acquire_recursive(lock: *mut _LOCK_RECURSIVE_T);
}
extern "C" {
    pub fn __libc_lock_release(lock: *mut _LOCK_T);
}
extern "C" {
    pub fn __libc_lock_release_recursive(lock: *mut _LOCK_RECURSIVE_T);
}
extern "C" {
    pub fn __libc_lock_try_acquire(lock: *mut _LOCK_T) -> ::libc::c_int;
}
extern "C" {
    pub fn __libc_lock_try_acquire_recursive(lock: *mut _LOCK_RECURSIVE_T) -> ::libc::c_int;
}
pub type _flock_t = _LOCK_RECURSIVE_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Bigint {
    pub _next: *mut _Bigint,
    pub _k: ::libc::c_int,
    pub _maxwds: ::libc::c_int,
    pub _sign: ::libc::c_int,
    pub _wds: ::libc::c_int,
    pub _x: [__ULong; 1usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __tm {
    pub __tm_sec: ::libc::c_int,
    pub __tm_min: ::libc::c_int,
    pub __tm_hour: ::libc::c_int,
    pub __tm_mday: ::libc::c_int,
    pub __tm_mon: ::libc::c_int,
    pub __tm_year: ::libc::c_int,
    pub __tm_wday: ::libc::c_int,
    pub __tm_yday: ::libc::c_int,
    pub __tm_isdst: ::libc::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _on_exit_args {
    pub _fnargs: [*mut ::libc::c_void; 32usize],
    pub _dso_handle: [*mut ::libc::c_void; 32usize],
    pub _fntypes: __ULong,
    pub _is_cxa: __ULong,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _atexit {
    pub _next: *mut _atexit,
    pub _ind: ::libc::c_int,
    pub _fns: [::core::option::Option<unsafe extern "C" fn()>; 32usize],
    pub _on_exit_args: _on_exit_args,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sbuf {
    pub _base: *mut ::libc::c_uchar,
    pub _size: ::libc::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __sFILE {
    pub _p: *mut ::libc::c_uchar,
    pub _r: ::libc::c_int,
    pub _w: ::libc::c_int,
    pub _flags: ::libc::c_short,
    pub _file: ::libc::c_short,
    pub _bf: __sbuf,
    pub _lbfsize: ::libc::c_int,
    pub _cookie: *mut ::libc::c_void,
    pub _read: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut _reent,
            arg2: *mut ::libc::c_void,
            arg3: *mut ::libc::c_char,
            arg4: ::libc::c_int,
        ) -> ::libc::c_int,
    >,
    pub _write: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut _reent,
            arg2: *mut ::libc::c_void,
            arg3: *const ::libc::c_char,
            arg4: ::libc::c_int,
        ) -> ::libc::c_int,
    >,
    pub _seek: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut _reent,
            arg2: *mut ::libc::c_void,
            arg3: _fpos_t,
            arg4: ::libc::c_int,
        ) -> _fpos_t,
    >,
    pub _close: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut _reent, arg2: *mut ::libc::c_void) -> ::libc::c_int,
    >,
    pub _ub: __sbuf,
    pub _up: *mut ::libc::c_uchar,
    pub _ur: ::libc::c_int,
    pub _ubuf: [::libc::c_uchar; 3usize],
    pub _nbuf: [::libc::c_uchar; 1usize],
    pub _lb: __sbuf,
    pub _blksize: ::libc::c_int,
    pub _offset: _off_t,
    pub _data: *mut _reent,
    pub _lock: _flock_t,
    pub _mbstate: _mbstate_t,
    pub _flags2: ::libc::c_int,
}
pub type __FILE = __sFILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _glue {
    pub _next: *mut _glue,
    pub _niobs: ::libc::c_int,
    pub _iobs: *mut __FILE,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _rand48 {
    pub _seed: [::libc::c_ushort; 3usize],
    pub _mult: [::libc::c_ushort; 3usize],
    pub _add: ::libc::c_ushort,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _reent {
    pub _errno: ::libc::c_int,
    pub _stdin: *mut __FILE,
    pub _stdout: *mut __FILE,
    pub _stderr: *mut __FILE,
    pub _inc: ::libc::c_int,
    pub _emergency: [::libc::c_char; 25usize],
    pub _unspecified_locale_info: ::libc::c_int,
    pub _locale: *mut __locale_t,
    pub __sdidinit: ::libc::c_int,
    pub __cleanup: ::core::option::Option<unsafe extern "C" fn(arg1: *mut _reent)>,
    pub _result: *mut _Bigint,
    pub _result_k: ::libc::c_int,
    pub _p5s: *mut _Bigint,
    pub _freelist: *mut *mut _Bigint,
    pub _cvtlen: ::libc::c_int,
    pub _cvtbuf: *mut ::libc::c_char,
    pub _new: _reent__bindgen_ty_1,
    pub _atexit: *mut _atexit,
    pub _atexit0: _atexit,
    pub _sig_func: *mut ::core::option::Option<unsafe extern "C" fn(arg1: ::libc::c_int)>,
    pub __sglue: _glue,
    pub __sf: [__FILE; 3usize],
    pub deviceData: *mut ::libc::c_void,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _reent__bindgen_ty_1 {
    pub _reent: _reent__bindgen_ty_1__bindgen_ty_1,
    pub _unused: _reent__bindgen_ty_1__bindgen_ty_2,
    _bindgen_union_align: [u64; 30usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _reent__bindgen_ty_1__bindgen_ty_1 {
    pub _unused_rand: ::libc::c_uint,
    pub _strtok_last: *mut ::libc::c_char,
    pub _asctime_buf: [::libc::c_char; 26usize],
    pub _localtime_buf: __tm,
    pub _gamma_signgam: ::libc::c_int,
    pub _rand_next: ::libc::c_ulonglong,
    pub _r48: _rand48,
    pub _mblen_state: _mbstate_t,
    pub _mbtowc_state: _mbstate_t,
    pub _wctomb_state: _mbstate_t,
    pub _l64a_buf: [::libc::c_char; 8usize],
    pub _signal_buf: [::libc::c_char; 24usize],
    pub _getdate_err: ::libc::c_int,
    pub _mbrlen_state: _mbstate_t,
    pub _mbrtowc_state: _mbstate_t,
    pub _mbsrtowcs_state: _mbstate_t,
    pub _wcrtomb_state: _mbstate_t,
    pub _wcsrtombs_state: _mbstate_t,
    pub _h_errno: ::libc::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _reent__bindgen_ty_1__bindgen_ty_2 {
    pub _nextf: [*mut ::libc::c_uchar; 30usize],
    pub _nmalloc: [::libc::c_uint; 30usize],
}
extern "C" {
    pub static mut _impure_ptr: *mut _reent;
}
extern "C" {
    pub static _global_impure_ptr: *mut _reent;
}
extern "C" {
    pub fn _reclaim_reent(arg1: *mut _reent);
}
extern "C" {
    pub fn __getreent() -> *mut _reent;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::libc::c_int,
    pub rem: ::libc::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::libc::c_long,
    pub rem: ::libc::c_long,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::libc::c_longlong,
    pub rem: ::libc::c_longlong,
}
pub type __compar_fn_t = ::core::option::Option<
    unsafe extern "C" fn(arg1: *const ::libc::c_void, arg2: *const ::libc::c_void) -> ::libc::c_int,
>;
extern "C" {
    pub fn __locale_mb_cur_max() -> ::libc::c_int;
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn abs(arg1: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn arc4random() -> __uint32_t;
}
extern "C" {
    pub fn arc4random_uniform(arg1: __uint32_t) -> __uint32_t;
}
extern "C" {
    pub fn arc4random_buf(arg1: *mut ::libc::c_void, arg2: size_t);
}
extern "C" {
    pub fn atexit(__func: ::core::option::Option<unsafe extern "C" fn()>) -> ::libc::c_int;
}
extern "C" {
    pub fn atof(__nptr: *const ::libc::c_char) -> f64;
}
extern "C" {
    pub fn atoff(__nptr: *const ::libc::c_char) -> f32;
}
extern "C" {
    pub fn atoi(__nptr: *const ::libc::c_char) -> ::libc::c_int;
}
extern "C" {
    pub fn _atoi_r(arg1: *mut _reent, __nptr: *const ::libc::c_char) -> ::libc::c_int;
}
extern "C" {
    pub fn atol(__nptr: *const ::libc::c_char) -> ::libc::c_long;
}
extern "C" {
    pub fn _atol_r(arg1: *mut _reent, __nptr: *const ::libc::c_char) -> ::libc::c_long;
}
extern "C" {
    pub fn bsearch(
        __key: *const ::libc::c_void,
        __base: *const ::libc::c_void,
        __nmemb: size_t,
        __size: size_t,
        _compar: __compar_fn_t,
    ) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn calloc(arg1: ::libc::c_uint, arg2: ::libc::c_uint) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn div(__numer: ::libc::c_int, __denom: ::libc::c_int) -> div_t;
}
extern "C" {
    pub fn exit(__status: ::libc::c_int);
}
extern "C" {
    pub fn free(arg1: *mut ::libc::c_void);
}
extern "C" {
    pub fn getenv(__string: *const ::libc::c_char) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn _getenv_r(arg1: *mut _reent, __string: *const ::libc::c_char) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn _findenv(arg1: *const ::libc::c_char, arg2: *mut ::libc::c_int) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn _findenv_r(
        arg1: *mut _reent,
        arg2: *const ::libc::c_char,
        arg3: *mut ::libc::c_int,
    ) -> *mut ::libc::c_char;
}
extern "C" {
    pub static mut suboptarg: *mut ::libc::c_char;
}
extern "C" {
    pub fn getsubopt(
        arg1: *mut *mut ::libc::c_char,
        arg2: *const *mut ::libc::c_char,
        arg3: *mut *mut ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn labs(arg1: ::libc::c_long) -> ::libc::c_long;
}
extern "C" {
    pub fn ldiv(__numer: ::libc::c_long, __denom: ::libc::c_long) -> ldiv_t;
}
extern "C" {
    pub fn malloc(arg1: ::libc::c_uint) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn mblen(arg1: *const ::libc::c_char, arg2: size_t) -> ::libc::c_int;
}
extern "C" {
    pub fn _mblen_r(
        arg1: *mut _reent,
        arg2: *const ::libc::c_char,
        arg3: size_t,
        arg4: *mut _mbstate_t,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn mbtowc(arg1: *mut wchar_t, arg2: *const ::libc::c_char, arg3: size_t) -> ::libc::c_int;
}
extern "C" {
    pub fn _mbtowc_r(
        arg1: *mut _reent,
        arg2: *mut wchar_t,
        arg3: *const ::libc::c_char,
        arg4: size_t,
        arg5: *mut _mbstate_t,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn wctomb(arg1: *mut ::libc::c_char, arg2: wchar_t) -> ::libc::c_int;
}
extern "C" {
    pub fn _wctomb_r(
        arg1: *mut _reent,
        arg2: *mut ::libc::c_char,
        arg3: wchar_t,
        arg4: *mut _mbstate_t,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn mbstowcs(arg1: *mut wchar_t, arg2: *const ::libc::c_char, arg3: size_t) -> size_t;
}
extern "C" {
    pub fn _mbstowcs_r(
        arg1: *mut _reent,
        arg2: *mut wchar_t,
        arg3: *const ::libc::c_char,
        arg4: size_t,
        arg5: *mut _mbstate_t,
    ) -> size_t;
}
extern "C" {
    pub fn wcstombs(arg1: *mut ::libc::c_char, arg2: *const wchar_t, arg3: size_t) -> size_t;
}
extern "C" {
    pub fn _wcstombs_r(
        arg1: *mut _reent,
        arg2: *mut ::libc::c_char,
        arg3: *const wchar_t,
        arg4: size_t,
        arg5: *mut _mbstate_t,
    ) -> size_t;
}
extern "C" {
    pub fn mkdtemp(arg1: *mut ::libc::c_char) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn mkstemp(arg1: *mut ::libc::c_char) -> ::libc::c_int;
}
extern "C" {
    pub fn mkstemps(arg1: *mut ::libc::c_char, arg2: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn mktemp(arg1: *mut ::libc::c_char) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn _mkdtemp_r(arg1: *mut _reent, arg2: *mut ::libc::c_char) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn _mkostemp_r(
        arg1: *mut _reent,
        arg2: *mut ::libc::c_char,
        arg3: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn _mkostemps_r(
        arg1: *mut _reent,
        arg2: *mut ::libc::c_char,
        arg3: ::libc::c_int,
        arg4: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn _mkstemp_r(arg1: *mut _reent, arg2: *mut ::libc::c_char) -> ::libc::c_int;
}
extern "C" {
    pub fn _mkstemps_r(
        arg1: *mut _reent,
        arg2: *mut ::libc::c_char,
        arg3: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn _mktemp_r(arg1: *mut _reent, arg2: *mut ::libc::c_char) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn qsort(
        __base: *mut ::libc::c_void,
        __nmemb: size_t,
        __size: size_t,
        _compar: __compar_fn_t,
    );
}
extern "C" {
    pub fn rand() -> ::libc::c_int;
}
extern "C" {
    pub fn realloc(arg1: *mut ::libc::c_void, arg2: ::libc::c_uint) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn reallocarray(
        arg1: *mut ::libc::c_void,
        arg2: size_t,
        arg3: size_t,
    ) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn reallocf(arg1: *mut ::libc::c_void, arg2: size_t) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn realpath(
        path: *const ::libc::c_char,
        resolved_path: *mut ::libc::c_char,
    ) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn rpmatch(response: *const ::libc::c_char) -> ::libc::c_int;
}
extern "C" {
    pub fn srand(__seed: ::libc::c_uint);
}
extern "C" {
    pub fn strtod(__n: *const ::libc::c_char, __end_PTR: *mut *mut ::libc::c_char) -> f64;
}
extern "C" {
    pub fn _strtod_r(
        arg1: *mut _reent,
        __n: *const ::libc::c_char,
        __end_PTR: *mut *mut ::libc::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof(__n: *const ::libc::c_char, __end_PTR: *mut *mut ::libc::c_char) -> f32;
}
extern "C" {
    pub fn strtol(
        __n: *const ::libc::c_char,
        __end_PTR: *mut *mut ::libc::c_char,
        __base: ::libc::c_int,
    ) -> ::libc::c_long;
}
extern "C" {
    pub fn _strtol_r(
        arg1: *mut _reent,
        __n: *const ::libc::c_char,
        __end_PTR: *mut *mut ::libc::c_char,
        __base: ::libc::c_int,
    ) -> ::libc::c_long;
}
extern "C" {
    pub fn strtoul(
        __n: *const ::libc::c_char,
        __end_PTR: *mut *mut ::libc::c_char,
        __base: ::libc::c_int,
    ) -> ::libc::c_ulong;
}
extern "C" {
    pub fn _strtoul_r(
        arg1: *mut _reent,
        __n: *const ::libc::c_char,
        __end_PTR: *mut *mut ::libc::c_char,
        __base: ::libc::c_int,
    ) -> ::libc::c_ulong;
}
extern "C" {
    pub fn system(__string: *const ::libc::c_char) -> ::libc::c_int;
}
extern "C" {
    pub fn a64l(__input: *const ::libc::c_char) -> ::libc::c_long;
}
extern "C" {
    pub fn l64a(__input: ::libc::c_long) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn _l64a_r(arg1: *mut _reent, __input: ::libc::c_long) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn on_exit(
        __func: ::core::option::Option<
            unsafe extern "C" fn(arg1: ::libc::c_int, arg2: *mut ::libc::c_void),
        >,
        __arg: *mut ::libc::c_void,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn _Exit(__status: ::libc::c_int);
}
extern "C" {
    pub fn putenv(__string: *mut ::libc::c_char) -> ::libc::c_int;
}
extern "C" {
    pub fn _putenv_r(arg1: *mut _reent, __string: *mut ::libc::c_char) -> ::libc::c_int;
}
extern "C" {
    pub fn _reallocf_r(
        arg1: *mut _reent,
        arg2: *mut ::libc::c_void,
        arg3: size_t,
    ) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn setenv(
        __string: *const ::libc::c_char,
        __value: *const ::libc::c_char,
        __overwrite: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn _setenv_r(
        arg1: *mut _reent,
        __string: *const ::libc::c_char,
        __value: *const ::libc::c_char,
        __overwrite: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn __itoa(
        arg1: ::libc::c_int,
        arg2: *mut ::libc::c_char,
        arg3: ::libc::c_int,
    ) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn __utoa(
        arg1: ::libc::c_uint,
        arg2: *mut ::libc::c_char,
        arg3: ::libc::c_int,
    ) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn itoa(
        arg1: ::libc::c_int,
        arg2: *mut ::libc::c_char,
        arg3: ::libc::c_int,
    ) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn utoa(
        arg1: ::libc::c_uint,
        arg2: *mut ::libc::c_char,
        arg3: ::libc::c_int,
    ) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn rand_r(__seed: *mut ::libc::c_uint) -> ::libc::c_int;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn _drand48_r(arg1: *mut _reent) -> f64;
}
extern "C" {
    pub fn erand48(arg1: *mut ::libc::c_ushort) -> f64;
}
extern "C" {
    pub fn _erand48_r(arg1: *mut _reent, arg2: *mut ::libc::c_ushort) -> f64;
}
extern "C" {
    pub fn jrand48(arg1: *mut ::libc::c_ushort) -> ::libc::c_long;
}
extern "C" {
    pub fn _jrand48_r(arg1: *mut _reent, arg2: *mut ::libc::c_ushort) -> ::libc::c_long;
}
extern "C" {
    pub fn lcong48(arg1: *mut ::libc::c_ushort);
}
extern "C" {
    pub fn _lcong48_r(arg1: *mut _reent, arg2: *mut ::libc::c_ushort);
}
extern "C" {
    pub fn lrand48() -> ::libc::c_long;
}
extern "C" {
    pub fn _lrand48_r(arg1: *mut _reent) -> ::libc::c_long;
}
extern "C" {
    pub fn mrand48() -> ::libc::c_long;
}
extern "C" {
    pub fn _mrand48_r(arg1: *mut _reent) -> ::libc::c_long;
}
extern "C" {
    pub fn nrand48(arg1: *mut ::libc::c_ushort) -> ::libc::c_long;
}
extern "C" {
    pub fn _nrand48_r(arg1: *mut _reent, arg2: *mut ::libc::c_ushort) -> ::libc::c_long;
}
extern "C" {
    pub fn seed48(arg1: *mut ::libc::c_ushort) -> *mut ::libc::c_ushort;
}
extern "C" {
    pub fn _seed48_r(arg1: *mut _reent, arg2: *mut ::libc::c_ushort) -> *mut ::libc::c_ushort;
}
extern "C" {
    pub fn srand48(arg1: ::libc::c_long);
}
extern "C" {
    pub fn _srand48_r(arg1: *mut _reent, arg2: ::libc::c_long);
}
extern "C" {
    pub fn initstate(
        arg1: ::libc::c_uint,
        arg2: *mut ::libc::c_char,
        arg3: size_t,
    ) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn random() -> ::libc::c_long;
}
extern "C" {
    pub fn setstate(arg1: *mut ::libc::c_char) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn srandom(arg1: ::libc::c_uint);
}
extern "C" {
    pub fn atoll(__nptr: *const ::libc::c_char) -> ::libc::c_longlong;
}
extern "C" {
    pub fn _atoll_r(arg1: *mut _reent, __nptr: *const ::libc::c_char) -> ::libc::c_longlong;
}
extern "C" {
    pub fn llabs(arg1: ::libc::c_longlong) -> ::libc::c_longlong;
}
extern "C" {
    pub fn lldiv(__numer: ::libc::c_longlong, __denom: ::libc::c_longlong) -> lldiv_t;
}
extern "C" {
    pub fn strtoll(
        __n: *const ::libc::c_char,
        __end_PTR: *mut *mut ::libc::c_char,
        __base: ::libc::c_int,
    ) -> ::libc::c_longlong;
}
extern "C" {
    pub fn _strtoll_r(
        arg1: *mut _reent,
        __n: *const ::libc::c_char,
        __end_PTR: *mut *mut ::libc::c_char,
        __base: ::libc::c_int,
    ) -> ::libc::c_longlong;
}
extern "C" {
    pub fn strtoull(
        __n: *const ::libc::c_char,
        __end_PTR: *mut *mut ::libc::c_char,
        __base: ::libc::c_int,
    ) -> ::libc::c_ulonglong;
}
extern "C" {
    pub fn _strtoull_r(
        arg1: *mut _reent,
        __n: *const ::libc::c_char,
        __end_PTR: *mut *mut ::libc::c_char,
        __base: ::libc::c_int,
    ) -> ::libc::c_ulonglong;
}
extern "C" {
    pub fn cfree(arg1: *mut ::libc::c_void);
}
extern "C" {
    pub fn unsetenv(__string: *const ::libc::c_char) -> ::libc::c_int;
}
extern "C" {
    pub fn _unsetenv_r(arg1: *mut _reent, __string: *const ::libc::c_char) -> ::libc::c_int;
}
extern "C" {
    pub fn posix_memalign(
        arg1: *mut *mut ::libc::c_void,
        arg2: size_t,
        arg3: size_t,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn _dtoa_r(
        arg1: *mut _reent,
        arg2: f64,
        arg3: ::libc::c_int,
        arg4: ::libc::c_int,
        arg5: *mut ::libc::c_int,
        arg6: *mut ::libc::c_int,
        arg7: *mut *mut ::libc::c_char,
    ) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn _malloc_r(arg1: *mut _reent, arg2: size_t) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn _calloc_r(arg1: *mut _reent, arg2: size_t, arg3: size_t) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn _free_r(arg1: *mut _reent, arg2: *mut ::libc::c_void);
}
extern "C" {
    pub fn _realloc_r(
        arg1: *mut _reent,
        arg2: *mut ::libc::c_void,
        arg3: size_t,
    ) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn _mstats_r(arg1: *mut _reent, arg2: *mut ::libc::c_char);
}
extern "C" {
    pub fn _system_r(arg1: *mut _reent, arg2: *const ::libc::c_char) -> ::libc::c_int;
}
extern "C" {
    pub fn __eprintf(
        arg1: *const ::libc::c_char,
        arg2: *const ::libc::c_char,
        arg3: ::libc::c_uint,
        arg4: *const ::libc::c_char,
    );
}
extern "C" {
    pub fn qsort_r(
        __base: *mut ::libc::c_void,
        __nmemb: size_t,
        __size: size_t,
        __thunk: *mut ::libc::c_void,
        _compar: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::libc::c_void,
                arg2: *const ::libc::c_void,
                arg3: *const ::libc::c_void,
            ) -> ::libc::c_int,
        >,
    );
}
extern "C" {
    pub fn _strtold_r(
        arg1: *mut _reent,
        arg2: *const ::libc::c_char,
        arg3: *mut *mut ::libc::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtold(arg1: *const ::libc::c_char, arg2: *mut *mut ::libc::c_char) -> f64;
}
extern "C" {
    pub fn aligned_alloc(arg1: size_t, arg2: size_t) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn at_quick_exit(arg1: ::core::option::Option<unsafe extern "C" fn()>) -> ::libc::c_int;
}
extern "C" {
    pub fn quick_exit(arg1: ::libc::c_int);
}
pub type locale_t = *mut __locale_t;
extern "C" {
    pub fn bcmp(
        arg1: *const ::libc::c_void,
        arg2: *const ::libc::c_void,
        arg3: ::libc::c_uint,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn bcopy(arg1: *const ::libc::c_void, arg2: *mut ::libc::c_void, arg3: size_t);
}
extern "C" {
    pub fn bzero(arg1: *mut ::libc::c_void, arg2: ::libc::c_uint);
}
extern "C" {
    pub fn explicit_bzero(arg1: *mut ::libc::c_void, arg2: size_t);
}
extern "C" {
    pub fn ffs(arg1: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn ffsl(arg1: ::libc::c_long) -> ::libc::c_int;
}
extern "C" {
    pub fn ffsll(arg1: ::libc::c_longlong) -> ::libc::c_int;
}
extern "C" {
    pub fn fls(arg1: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn flsl(arg1: ::libc::c_long) -> ::libc::c_int;
}
extern "C" {
    pub fn flsll(arg1: ::libc::c_longlong) -> ::libc::c_int;
}
extern "C" {
    pub fn index(arg1: *const ::libc::c_char, arg2: ::libc::c_int) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn rindex(arg1: *const ::libc::c_char, arg2: ::libc::c_int) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn strcasecmp(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char) -> ::libc::c_int;
}
extern "C" {
    pub fn strncasecmp(
        arg1: *const ::libc::c_char,
        arg2: *const ::libc::c_char,
        arg3: ::libc::c_uint,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn strcasecmp_l(
        arg1: *const ::libc::c_char,
        arg2: *const ::libc::c_char,
        arg3: locale_t,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn strncasecmp_l(
        arg1: *const ::libc::c_char,
        arg2: *const ::libc::c_char,
        arg3: size_t,
        arg4: locale_t,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn memchr(
        arg1: *const ::libc::c_void,
        arg2: ::libc::c_int,
        arg3: ::libc::c_uint,
    ) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn memcmp(
        arg1: *const ::libc::c_void,
        arg2: *const ::libc::c_void,
        arg3: ::libc::c_uint,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn memcpy(
        arg1: *mut ::libc::c_void,
        arg2: *const ::libc::c_void,
        arg3: ::libc::c_uint,
    ) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn memmove(
        arg1: *mut ::libc::c_void,
        arg2: *const ::libc::c_void,
        arg3: ::libc::c_uint,
    ) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn memset(
        arg1: *mut ::libc::c_void,
        arg2: ::libc::c_int,
        arg3: ::libc::c_uint,
    ) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn strcat(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn strchr(arg1: *const ::libc::c_char, arg2: ::libc::c_int) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn strcmp(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char) -> ::libc::c_int;
}
extern "C" {
    pub fn strcoll(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char) -> ::libc::c_int;
}
extern "C" {
    pub fn strcpy(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn strcspn(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char) -> ::libc::c_uint;
}
extern "C" {
    pub fn strerror(arg1: ::libc::c_int) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn strlen(arg1: *const ::libc::c_char) -> ::libc::c_uint;
}
extern "C" {
    pub fn strncat(
        arg1: *mut ::libc::c_char,
        arg2: *const ::libc::c_char,
        arg3: ::libc::c_uint,
    ) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn strncmp(
        arg1: *const ::libc::c_char,
        arg2: *const ::libc::c_char,
        arg3: ::libc::c_uint,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn strncpy(
        arg1: *mut ::libc::c_char,
        arg2: *const ::libc::c_char,
        arg3: ::libc::c_uint,
    ) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn strpbrk(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char)
        -> *mut ::libc::c_char;
}
extern "C" {
    pub fn strrchr(arg1: *const ::libc::c_char, arg2: ::libc::c_int) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn strspn(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char) -> ::libc::c_uint;
}
extern "C" {
    pub fn strstr(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn strtok(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn strxfrm(
        arg1: *mut ::libc::c_char,
        arg2: *const ::libc::c_char,
        arg3: ::libc::c_uint,
    ) -> ::libc::c_uint;
}
extern "C" {
    pub fn strcoll_l(
        arg1: *const ::libc::c_char,
        arg2: *const ::libc::c_char,
        arg3: locale_t,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn strerror_l(arg1: ::libc::c_int, arg2: locale_t) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn strxfrm_l(
        arg1: *mut ::libc::c_char,
        arg2: *const ::libc::c_char,
        arg3: size_t,
        arg4: locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn strtok_r(
        arg1: *mut ::libc::c_char,
        arg2: *const ::libc::c_char,
        arg3: *mut *mut ::libc::c_char,
    ) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn timingsafe_bcmp(
        arg1: *const ::libc::c_void,
        arg2: *const ::libc::c_void,
        arg3: size_t,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn timingsafe_memcmp(
        arg1: *const ::libc::c_void,
        arg2: *const ::libc::c_void,
        arg3: size_t,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn memccpy(
        arg1: *mut ::libc::c_void,
        arg2: *const ::libc::c_void,
        arg3: ::libc::c_int,
        arg4: ::libc::c_uint,
    ) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn stpcpy(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn stpncpy(
        arg1: *mut ::libc::c_char,
        arg2: *const ::libc::c_char,
        arg3: ::libc::c_uint,
    ) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn strdup(arg1: *const ::libc::c_char) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn _strdup_r(arg1: *mut _reent, arg2: *const ::libc::c_char) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn strndup(arg1: *const ::libc::c_char, arg2: ::libc::c_uint) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn _strndup_r(
        arg1: *mut _reent,
        arg2: *const ::libc::c_char,
        arg3: size_t,
    ) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn strerror_r(
        arg1: ::libc::c_int,
        arg2: *mut ::libc::c_char,
        arg3: size_t,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn _strerror_r(
        arg1: *mut _reent,
        arg2: ::libc::c_int,
        arg3: ::libc::c_int,
        arg4: *mut ::libc::c_int,
    ) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn strlcat(
        arg1: *mut ::libc::c_char,
        arg2: *const ::libc::c_char,
        arg3: ::libc::c_uint,
    ) -> ::libc::c_uint;
}
extern "C" {
    pub fn strlcpy(
        arg1: *mut ::libc::c_char,
        arg2: *const ::libc::c_char,
        arg3: ::libc::c_uint,
    ) -> ::libc::c_uint;
}
extern "C" {
    pub fn strnlen(arg1: *const ::libc::c_char, arg2: size_t) -> size_t;
}
extern "C" {
    pub fn strsep(
        arg1: *mut *mut ::libc::c_char,
        arg2: *const ::libc::c_char,
    ) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn strnstr(
        arg1: *const ::libc::c_char,
        arg2: *const ::libc::c_char,
        arg3: size_t,
    ) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn strlwr(arg1: *mut ::libc::c_char) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn strupr(arg1: *mut ::libc::c_char) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn strsignal(__signo: ::libc::c_int) -> *mut ::libc::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DynamicArray {
    pub data: *mut *mut ::libc::c_void,
    pub cur_size: ::libc::c_uint,
}
extern "C" {
    pub fn DynamicArrayInit(
        v: *mut DynamicArray,
        initialSize: ::libc::c_uint,
    ) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn DynamicArrayDelete(v: *mut DynamicArray);
}
extern "C" {
    pub fn DynamicArrayGet(v: *mut DynamicArray, index: ::libc::c_uint) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn DynamicArraySet(
        v: *mut DynamicArray,
        index: ::libc::c_uint,
        item: *mut ::libc::c_void,
    ) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mallinfo {
    pub arena: size_t,
    pub ordblks: size_t,
    pub smblks: size_t,
    pub hblks: size_t,
    pub hblkhd: size_t,
    pub usmblks: size_t,
    pub fsmblks: size_t,
    pub uordblks: size_t,
    pub fordblks: size_t,
    pub keepcost: size_t,
}
extern "C" {
    pub fn memalign(arg1: size_t, arg2: size_t) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn _memalign_r(arg1: *mut _reent, arg2: size_t, arg3: size_t) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn mallinfo() -> mallinfo;
}
extern "C" {
    pub fn _mallinfo_r(arg1: *mut _reent) -> mallinfo;
}
extern "C" {
    pub fn malloc_stats();
}
extern "C" {
    pub fn _malloc_stats_r(arg1: *mut _reent);
}
extern "C" {
    pub fn mallopt(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn _mallopt_r(arg1: *mut _reent, arg2: ::libc::c_int, arg3: ::libc::c_int)
        -> ::libc::c_int;
}
extern "C" {
    pub fn malloc_usable_size(arg1: *mut ::libc::c_void) -> size_t;
}
extern "C" {
    pub fn _malloc_usable_size_r(arg1: *mut _reent, arg2: *mut ::libc::c_void) -> size_t;
}
extern "C" {
    pub fn valloc(arg1: size_t) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn _valloc_r(arg1: *mut _reent, arg2: size_t) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn pvalloc(arg1: size_t) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn _pvalloc_r(arg1: *mut _reent, arg2: size_t) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn malloc_trim(arg1: size_t) -> ::libc::c_int;
}
extern "C" {
    pub fn _malloc_trim_r(arg1: *mut _reent, arg2: size_t) -> ::libc::c_int;
}
extern "C" {
    pub fn __malloc_lock(arg1: *mut _reent);
}
extern "C" {
    pub fn __malloc_unlock(arg1: *mut _reent);
}
extern "C" {
    pub fn mstats(arg1: *mut ::libc::c_char);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LinkedList {
    pub next: *mut LinkedList,
    pub prev: *mut LinkedList,
    pub data: *mut ::libc::c_void,
}
extern "C" {
    pub fn linkedlistAdd(front: *mut *mut LinkedList, data: *mut ::libc::c_void)
        -> *mut LinkedList;
}
extern "C" {
    pub fn linkedlistRemove(node: *mut LinkedList);
}
extern "C" {
    pub fn __sassert(
        fileName: *const ::libc::c_char,
        lineNumber: ::libc::c_int,
        conditionString: *const ::libc::c_char,
        format: *const ::libc::c_char,
        ...
    );
}
extern "C" {
    pub static mut mosaicShadow: u16_;
}
extern "C" {
    pub static mut mosaicShadowSub: u16_;
}
pub const VRAM_A_LCD: VRAM_A_TYPE = 0;
pub const VRAM_A_MAIN_BG: VRAM_A_TYPE = 1;
pub const VRAM_A_MAIN_BG_0x06000000: VRAM_A_TYPE = 1;
pub const VRAM_A_MAIN_BG_0x06020000: VRAM_A_TYPE = 9;
pub const VRAM_A_MAIN_BG_0x06040000: VRAM_A_TYPE = 17;
pub const VRAM_A_MAIN_BG_0x06060000: VRAM_A_TYPE = 25;
pub const VRAM_A_MAIN_SPRITE: VRAM_A_TYPE = 2;
pub const VRAM_A_MAIN_SPRITE_0x06400000: VRAM_A_TYPE = 2;
pub const VRAM_A_MAIN_SPRITE_0x06420000: VRAM_A_TYPE = 10;
pub const VRAM_A_TEXTURE: VRAM_A_TYPE = 3;
pub const VRAM_A_TEXTURE_SLOT0: VRAM_A_TYPE = 3;
pub const VRAM_A_TEXTURE_SLOT1: VRAM_A_TYPE = 11;
pub const VRAM_A_TEXTURE_SLOT2: VRAM_A_TYPE = 19;
pub const VRAM_A_TEXTURE_SLOT3: VRAM_A_TYPE = 27;
pub type VRAM_A_TYPE = ::libc::c_uint;
pub const VRAM_B_LCD: VRAM_B_TYPE = 0;
pub const VRAM_B_MAIN_BG: VRAM_B_TYPE = 9;
pub const VRAM_B_MAIN_BG_0x06000000: VRAM_B_TYPE = 1;
pub const VRAM_B_MAIN_BG_0x06020000: VRAM_B_TYPE = 9;
pub const VRAM_B_MAIN_BG_0x06040000: VRAM_B_TYPE = 17;
pub const VRAM_B_MAIN_BG_0x06060000: VRAM_B_TYPE = 25;
pub const VRAM_B_MAIN_SPRITE: VRAM_B_TYPE = 2;
pub const VRAM_B_MAIN_SPRITE_0x06400000: VRAM_B_TYPE = 2;
pub const VRAM_B_MAIN_SPRITE_0x06420000: VRAM_B_TYPE = 10;
pub const VRAM_B_TEXTURE: VRAM_B_TYPE = 11;
pub const VRAM_B_TEXTURE_SLOT0: VRAM_B_TYPE = 3;
pub const VRAM_B_TEXTURE_SLOT1: VRAM_B_TYPE = 11;
pub const VRAM_B_TEXTURE_SLOT2: VRAM_B_TYPE = 19;
pub const VRAM_B_TEXTURE_SLOT3: VRAM_B_TYPE = 27;
pub type VRAM_B_TYPE = ::libc::c_uint;
pub const VRAM_C_LCD: VRAM_C_TYPE = 0;
pub const VRAM_C_MAIN_BG: VRAM_C_TYPE = 17;
pub const VRAM_C_MAIN_BG_0x06000000: VRAM_C_TYPE = 1;
pub const VRAM_C_MAIN_BG_0x06020000: VRAM_C_TYPE = 9;
pub const VRAM_C_MAIN_BG_0x06040000: VRAM_C_TYPE = 17;
pub const VRAM_C_MAIN_BG_0x06060000: VRAM_C_TYPE = 25;
pub const VRAM_C_ARM7: VRAM_C_TYPE = 2;
pub const VRAM_C_ARM7_0x06000000: VRAM_C_TYPE = 2;
pub const VRAM_C_ARM7_0x06020000: VRAM_C_TYPE = 10;
pub const VRAM_C_SUB_BG: VRAM_C_TYPE = 4;
pub const VRAM_C_SUB_BG_0x06200000: VRAM_C_TYPE = 4;
pub const VRAM_C_TEXTURE: VRAM_C_TYPE = 19;
pub const VRAM_C_TEXTURE_SLOT0: VRAM_C_TYPE = 3;
pub const VRAM_C_TEXTURE_SLOT1: VRAM_C_TYPE = 11;
pub const VRAM_C_TEXTURE_SLOT2: VRAM_C_TYPE = 19;
pub const VRAM_C_TEXTURE_SLOT3: VRAM_C_TYPE = 27;
pub type VRAM_C_TYPE = ::libc::c_uint;
pub const VRAM_D_LCD: VRAM_D_TYPE = 0;
pub const VRAM_D_MAIN_BG: VRAM_D_TYPE = 25;
pub const VRAM_D_MAIN_BG_0x06000000: VRAM_D_TYPE = 1;
pub const VRAM_D_MAIN_BG_0x06020000: VRAM_D_TYPE = 9;
pub const VRAM_D_MAIN_BG_0x06040000: VRAM_D_TYPE = 17;
pub const VRAM_D_MAIN_BG_0x06060000: VRAM_D_TYPE = 25;
pub const VRAM_D_ARM7: VRAM_D_TYPE = 10;
pub const VRAM_D_ARM7_0x06000000: VRAM_D_TYPE = 2;
pub const VRAM_D_ARM7_0x06020000: VRAM_D_TYPE = 10;
pub const VRAM_D_SUB_SPRITE: VRAM_D_TYPE = 4;
pub const VRAM_D_TEXTURE: VRAM_D_TYPE = 27;
pub const VRAM_D_TEXTURE_SLOT0: VRAM_D_TYPE = 3;
pub const VRAM_D_TEXTURE_SLOT1: VRAM_D_TYPE = 11;
pub const VRAM_D_TEXTURE_SLOT2: VRAM_D_TYPE = 19;
pub const VRAM_D_TEXTURE_SLOT3: VRAM_D_TYPE = 27;
pub type VRAM_D_TYPE = ::libc::c_uint;
pub const VRAM_E_LCD: VRAM_E_TYPE = 0;
pub const VRAM_E_MAIN_BG: VRAM_E_TYPE = 1;
pub const VRAM_E_MAIN_SPRITE: VRAM_E_TYPE = 2;
pub const VRAM_E_TEX_PALETTE: VRAM_E_TYPE = 3;
pub const VRAM_E_BG_EXT_PALETTE: VRAM_E_TYPE = 4;
pub type VRAM_E_TYPE = ::libc::c_uint;
pub const VRAM_F_LCD: VRAM_F_TYPE = 0;
pub const VRAM_F_MAIN_BG: VRAM_F_TYPE = 1;
pub const VRAM_F_MAIN_BG_0x06000000: VRAM_F_TYPE = 1;
pub const VRAM_F_MAIN_BG_0x06004000: VRAM_F_TYPE = 9;
pub const VRAM_F_MAIN_BG_0x06010000: VRAM_F_TYPE = 17;
pub const VRAM_F_MAIN_BG_0x06014000: VRAM_F_TYPE = 25;
pub const VRAM_F_MAIN_SPRITE: VRAM_F_TYPE = 2;
pub const VRAM_F_MAIN_SPRITE_0x06400000: VRAM_F_TYPE = 2;
pub const VRAM_F_MAIN_SPRITE_0x06404000: VRAM_F_TYPE = 10;
pub const VRAM_F_MAIN_SPRITE_0x06410000: VRAM_F_TYPE = 18;
pub const VRAM_F_MAIN_SPRITE_0x06414000: VRAM_F_TYPE = 26;
pub const VRAM_F_TEX_PALETTE: VRAM_F_TYPE = 3;
pub const VRAM_F_TEX_PALETTE_SLOT0: VRAM_F_TYPE = 3;
pub const VRAM_F_TEX_PALETTE_SLOT1: VRAM_F_TYPE = 11;
pub const VRAM_F_TEX_PALETTE_SLOT4: VRAM_F_TYPE = 19;
pub const VRAM_F_TEX_PALETTE_SLOT5: VRAM_F_TYPE = 27;
pub const VRAM_F_BG_EXT_PALETTE: VRAM_F_TYPE = 4;
pub const VRAM_F_BG_EXT_PALETTE_SLOT01: VRAM_F_TYPE = 4;
pub const VRAM_F_BG_EXT_PALETTE_SLOT23: VRAM_F_TYPE = 12;
pub const VRAM_F_SPRITE_EXT_PALETTE: VRAM_F_TYPE = 5;
pub type VRAM_F_TYPE = ::libc::c_uint;
pub const VRAM_G_LCD: VRAM_G_TYPE = 0;
pub const VRAM_G_MAIN_BG: VRAM_G_TYPE = 1;
pub const VRAM_G_MAIN_BG_0x06000000: VRAM_G_TYPE = 1;
pub const VRAM_G_MAIN_BG_0x06004000: VRAM_G_TYPE = 9;
pub const VRAM_G_MAIN_BG_0x06010000: VRAM_G_TYPE = 17;
pub const VRAM_G_MAIN_BG_0x06014000: VRAM_G_TYPE = 25;
pub const VRAM_G_MAIN_SPRITE: VRAM_G_TYPE = 2;
pub const VRAM_G_MAIN_SPRITE_0x06400000: VRAM_G_TYPE = 2;
pub const VRAM_G_MAIN_SPRITE_0x06404000: VRAM_G_TYPE = 10;
pub const VRAM_G_MAIN_SPRITE_0x06410000: VRAM_G_TYPE = 18;
pub const VRAM_G_MAIN_SPRITE_0x06414000: VRAM_G_TYPE = 26;
pub const VRAM_G_TEX_PALETTE: VRAM_G_TYPE = 3;
pub const VRAM_G_TEX_PALETTE_SLOT0: VRAM_G_TYPE = 3;
pub const VRAM_G_TEX_PALETTE_SLOT1: VRAM_G_TYPE = 11;
pub const VRAM_G_TEX_PALETTE_SLOT4: VRAM_G_TYPE = 19;
pub const VRAM_G_TEX_PALETTE_SLOT5: VRAM_G_TYPE = 27;
pub const VRAM_G_BG_EXT_PALETTE: VRAM_G_TYPE = 4;
pub const VRAM_G_BG_EXT_PALETTE_SLOT01: VRAM_G_TYPE = 4;
pub const VRAM_G_BG_EXT_PALETTE_SLOT23: VRAM_G_TYPE = 12;
pub const VRAM_G_SPRITE_EXT_PALETTE: VRAM_G_TYPE = 5;
pub type VRAM_G_TYPE = ::libc::c_uint;
pub const VRAM_H_LCD: VRAM_H_TYPE = 0;
pub const VRAM_H_SUB_BG: VRAM_H_TYPE = 1;
pub const VRAM_H_SUB_BG_EXT_PALETTE: VRAM_H_TYPE = 2;
pub type VRAM_H_TYPE = ::libc::c_uint;
pub const VRAM_I_LCD: VRAM_I_TYPE = 0;
pub const VRAM_I_SUB_BG_0x06208000: VRAM_I_TYPE = 1;
pub const VRAM_I_SUB_SPRITE: VRAM_I_TYPE = 2;
pub const VRAM_I_SUB_SPRITE_EXT_PALETTE: VRAM_I_TYPE = 3;
pub type VRAM_I_TYPE = ::libc::c_uint;
pub type _palette = [u16_; 256usize];
pub type _ext_palette = [_palette; 16usize];
extern "C" {
    pub fn vramSetPrimaryBanks(
        a: VRAM_A_TYPE,
        b: VRAM_B_TYPE,
        c: VRAM_C_TYPE,
        d: VRAM_D_TYPE,
    ) -> u32_;
}
extern "C" {
    pub fn vramSetMainBanks(a: VRAM_A_TYPE, b: VRAM_B_TYPE, c: VRAM_C_TYPE, d: VRAM_D_TYPE)
        -> u32_;
}
extern "C" {
    pub fn vramSetBanks_EFG(e: VRAM_E_TYPE, f: VRAM_F_TYPE, g: VRAM_G_TYPE) -> u32_;
}
extern "C" {
    pub fn vramDefault() -> u32_;
}
extern "C" {
    pub fn vramRestorePrimaryBanks(vramTemp: u32_);
}
extern "C" {
    pub fn vramRestoreMainBanks(vramTemp: u32_);
}
extern "C" {
    pub fn vramRestoreBanks_EFG(vramTemp: u32_);
}
pub const MODE_0_2D: VideoMode = 65536;
pub const MODE_1_2D: VideoMode = 65537;
pub const MODE_2_2D: VideoMode = 65538;
pub const MODE_3_2D: VideoMode = 65539;
pub const MODE_4_2D: VideoMode = 65540;
pub const MODE_5_2D: VideoMode = 65541;
pub const MODE_6_2D: VideoMode = 65542;
pub const MODE_0_3D: VideoMode = 65800;
pub const MODE_1_3D: VideoMode = 65801;
pub const MODE_2_3D: VideoMode = 65802;
pub const MODE_3_3D: VideoMode = 65803;
pub const MODE_4_3D: VideoMode = 65804;
pub const MODE_5_3D: VideoMode = 65805;
pub const MODE_6_3D: VideoMode = 65806;
pub const MODE_FIFO: VideoMode = 196608;
pub const MODE_FB0: VideoMode = 131072;
pub const MODE_FB1: VideoMode = 393216;
pub const MODE_FB2: VideoMode = 655360;
pub const MODE_FB3: VideoMode = 917504;
pub type VideoMode = ::libc::c_uint;
extern "C" {
    pub fn setBrightness(screen: ::libc::c_int, level: ::libc::c_int);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bg_scroll {
    pub x: u16_,
    pub y: u16_,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bg_transform {
    pub hdx: s16,
    pub vdx: s16,
    pub hdy: s16,
    pub vdy: s16,
    pub dx: s32,
    pub dy: s32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bg_attribute {
    pub control: [u16_; 4usize],
    pub scroll: [bg_scroll; 4usize],
    pub bg2_rotation: bg_transform,
    pub bg3_rotation: bg_transform,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TileMapEntry8 {
    pub index: u8_,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct TileMapEntry16 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
impl TileMapEntry16 {
    #[inline]
    pub fn index(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 10u8) as u16) }
    }
    #[inline]
    pub fn set_index(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 10u8, val as u64)
        }
    }
    #[inline]
    pub fn hflip(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_hflip(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn vflip(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_vflip(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn palette(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 4u8) as u16) }
    }
    #[inline]
    pub fn set_palette(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        index: u16_,
        hflip: u16_,
        vflip: u16_,
        palette: u16_,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 10u8, {
            let index: u16 = unsafe { ::core::mem::transmute(index) };
            index as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let hflip: u16 = unsafe { ::core::mem::transmute(hflip) };
            hflip as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let vflip: u16 = unsafe { ::core::mem::transmute(vflip) };
            vflip as u64
        });
        __bindgen_bitfield_unit.set(12usize, 4u8, {
            let palette: u16 = unsafe { ::core::mem::transmute(palette) };
            palette as u64
        });
        __bindgen_bitfield_unit
    }
}
pub const BG_32x32: BackgroundControl = 0;
pub const BG_64x32: BackgroundControl = 16384;
pub const BG_32x64: BackgroundControl = 32768;
pub const BG_64x64: BackgroundControl = 49152;
pub const BG_RS_16x16: BackgroundControl = 0;
pub const BG_RS_32x32: BackgroundControl = 16384;
pub const BG_RS_64x64: BackgroundControl = 32768;
pub const BG_RS_128x128: BackgroundControl = 49152;
pub const BG_BMP8_128x128: BackgroundControl = 128;
pub const BG_BMP8_256x256: BackgroundControl = 16512;
pub const BG_BMP8_512x256: BackgroundControl = 32896;
pub const BG_BMP8_512x512: BackgroundControl = 49280;
pub const BG_BMP8_1024x512: BackgroundControl = 16384;
pub const BG_BMP8_512x1024: BackgroundControl = 0;
pub const BG_BMP16_128x128: BackgroundControl = 132;
pub const BG_BMP16_256x256: BackgroundControl = 16516;
pub const BG_BMP16_512x256: BackgroundControl = 32900;
pub const BG_BMP16_512x512: BackgroundControl = 49284;
pub const BG_MOSAIC_ON: BackgroundControl = 64;
pub const BG_MOSAIC_OFF: BackgroundControl = 0;
pub const BG_PRIORITY_0: BackgroundControl = 0;
pub const BG_PRIORITY_1: BackgroundControl = 1;
pub const BG_PRIORITY_2: BackgroundControl = 2;
pub const BG_PRIORITY_3: BackgroundControl = 3;
pub const BG_WRAP_OFF: BackgroundControl = 0;
pub const BG_WRAP_ON: BackgroundControl = 8192;
pub const BG_PALETTE_SLOT0: BackgroundControl = 0;
pub const BG_PALETTE_SLOT1: BackgroundControl = 0;
pub const BG_PALETTE_SLOT2: BackgroundControl = 8192;
pub const BG_PALETTE_SLOT3: BackgroundControl = 8192;
pub const BG_COLOR_256: BackgroundControl = 128;
pub const BG_COLOR_16: BackgroundControl = 0;
pub type BackgroundControl = ::libc::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BgState {
    pub angle: ::libc::c_int,
    pub centerX: s32,
    pub centerY: s32,
    pub scaleX: s32,
    pub scaleY: s32,
    pub scrollX: s32,
    pub scrollY: s32,
    pub size: ::libc::c_int,
    pub type_: ::libc::c_int,
    pub dirty: bool,
}
extern "C" {
    pub static mut bgControl: [*mut vuint16; 8usize];
}
extern "C" {
    pub static mut bgScrollTable: [*mut bg_scroll; 8usize];
}
extern "C" {
    pub static mut bgTransform: [*mut bg_transform; 8usize];
}
extern "C" {
    pub static mut bgState: [BgState; 8usize];
}
pub const BgType_Text8bpp: BgType = 0;
pub const BgType_Text4bpp: BgType = 1;
pub const BgType_Rotation: BgType = 2;
pub const BgType_ExRotation: BgType = 3;
pub const BgType_Bmp8: BgType = 4;
pub const BgType_Bmp16: BgType = 5;
pub type BgType = ::libc::c_uint;
pub const BgSize_R_128x128: BgSize = 0;
pub const BgSize_R_256x256: BgSize = 16384;
pub const BgSize_R_512x512: BgSize = 32768;
pub const BgSize_R_1024x1024: BgSize = 49152;
pub const BgSize_T_256x256: BgSize = 65536;
pub const BgSize_T_512x256: BgSize = 81920;
pub const BgSize_T_256x512: BgSize = 98304;
pub const BgSize_T_512x512: BgSize = 114688;
pub const BgSize_ER_128x128: BgSize = 131072;
pub const BgSize_ER_256x256: BgSize = 147456;
pub const BgSize_ER_512x512: BgSize = 163840;
pub const BgSize_ER_1024x1024: BgSize = 180224;
pub const BgSize_B8_128x128: BgSize = 196736;
pub const BgSize_B8_256x256: BgSize = 213120;
pub const BgSize_B8_512x256: BgSize = 229504;
pub const BgSize_B8_512x512: BgSize = 245888;
pub const BgSize_B8_1024x512: BgSize = 212992;
pub const BgSize_B8_512x1024: BgSize = 196608;
pub const BgSize_B16_128x128: BgSize = 262276;
pub const BgSize_B16_256x256: BgSize = 278660;
pub const BgSize_B16_512x256: BgSize = 295044;
pub const BgSize_B16_512x512: BgSize = 311428;
pub type BgSize = ::libc::c_uint;
extern "C" {
    pub fn bgIsText(id: ::libc::c_int) -> bool;
}
extern "C" {
    pub fn bgInit_call(
        layer: ::libc::c_int,
        type_: BgType,
        size: BgSize,
        mapBase: ::libc::c_int,
        tileBase: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn bgInitSub_call(
        layer: ::libc::c_int,
        type_: BgType,
        size: BgSize,
        mapBase: ::libc::c_int,
        tileBase: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn bgUpdate();
}
extern "C" {
    pub fn IC_InvalidateAll();
}
extern "C" {
    pub fn IC_InvalidateRange(base: *const ::libc::c_void, size: u32_);
}
extern "C" {
    pub fn DC_FlushAll();
}
extern "C" {
    pub fn DC_FlushRange(base: *const ::libc::c_void, size: u32_);
}
extern "C" {
    pub fn DC_InvalidateAll();
}
extern "C" {
    pub fn DC_InvalidateRange(base: *const ::libc::c_void, size: u32_);
}
extern "C" {
    pub fn sinLerp(angle: s16) -> s16;
}
extern "C" {
    pub fn cosLerp(angle: s16) -> s16;
}
extern "C" {
    pub fn tanLerp(angle: s16) -> s32;
}
extern "C" {
    pub fn asinLerp(par: s16) -> s16;
}
extern "C" {
    pub fn acosLerp(par: s16) -> s16;
}
pub type fixed12d3 = uint16;
pub type t16 = ::libc::c_short;
pub type v16 = ::libc::c_short;
pub type v10 = ::libc::c_short;
pub type rgb = ::libc::c_ushort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m3x3 {
    pub m: [::libc::c_int; 9usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m4x4 {
    pub m: [::libc::c_int; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m4x3 {
    pub m: [::libc::c_int; 12usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GLvector {
    pub x: ::libc::c_int,
    pub y: ::libc::c_int,
    pub z: ::libc::c_int,
}
pub const GL_TRIANGLES: GL_GLBEGIN_ENUM = 0;
pub const GL_QUADS: GL_GLBEGIN_ENUM = 1;
pub const GL_TRIANGLE_STRIP: GL_GLBEGIN_ENUM = 2;
pub const GL_QUAD_STRIP: GL_GLBEGIN_ENUM = 3;
pub const GL_TRIANGLE: GL_GLBEGIN_ENUM = 0;
pub const GL_QUAD: GL_GLBEGIN_ENUM = 1;
pub type GL_GLBEGIN_ENUM = ::libc::c_uint;
pub const GL_PROJECTION: GL_MATRIX_MODE_ENUM = 0;
pub const GL_POSITION: GL_MATRIX_MODE_ENUM = 1;
pub const GL_MODELVIEW: GL_MATRIX_MODE_ENUM = 2;
pub const GL_TEXTURE: GL_MATRIX_MODE_ENUM = 3;
pub type GL_MATRIX_MODE_ENUM = ::libc::c_uint;
pub const GL_AMBIENT: GL_MATERIALS_ENUM = 1;
pub const GL_DIFFUSE: GL_MATERIALS_ENUM = 2;
pub const GL_AMBIENT_AND_DIFFUSE: GL_MATERIALS_ENUM = 3;
pub const GL_SPECULAR: GL_MATERIALS_ENUM = 4;
pub const GL_SHININESS: GL_MATERIALS_ENUM = 8;
pub const GL_EMISSION: GL_MATERIALS_ENUM = 16;
pub type GL_MATERIALS_ENUM = ::libc::c_uint;
pub const POLY_FORMAT_LIGHT0: GL_POLY_FORMAT_ENUM = 1;
pub const POLY_FORMAT_LIGHT1: GL_POLY_FORMAT_ENUM = 2;
pub const POLY_FORMAT_LIGHT2: GL_POLY_FORMAT_ENUM = 4;
pub const POLY_FORMAT_LIGHT3: GL_POLY_FORMAT_ENUM = 8;
pub const POLY_MODULATION: GL_POLY_FORMAT_ENUM = 0;
pub const POLY_DECAL: GL_POLY_FORMAT_ENUM = 16;
pub const POLY_TOON_HIGHLIGHT: GL_POLY_FORMAT_ENUM = 32;
pub const POLY_SHADOW: GL_POLY_FORMAT_ENUM = 48;
pub const POLY_CULL_FRONT: GL_POLY_FORMAT_ENUM = 64;
pub const POLY_CULL_BACK: GL_POLY_FORMAT_ENUM = 128;
pub const POLY_CULL_NONE: GL_POLY_FORMAT_ENUM = 192;
pub const POLY_FOG: GL_POLY_FORMAT_ENUM = 32768;
pub type GL_POLY_FORMAT_ENUM = ::libc::c_uint;
pub const TEXTURE_SIZE_8: GL_TEXTURE_SIZE_ENUM = 0;
pub const TEXTURE_SIZE_16: GL_TEXTURE_SIZE_ENUM = 1;
pub const TEXTURE_SIZE_32: GL_TEXTURE_SIZE_ENUM = 2;
pub const TEXTURE_SIZE_64: GL_TEXTURE_SIZE_ENUM = 3;
pub const TEXTURE_SIZE_128: GL_TEXTURE_SIZE_ENUM = 4;
pub const TEXTURE_SIZE_256: GL_TEXTURE_SIZE_ENUM = 5;
pub const TEXTURE_SIZE_512: GL_TEXTURE_SIZE_ENUM = 6;
pub const TEXTURE_SIZE_1024: GL_TEXTURE_SIZE_ENUM = 7;
pub type GL_TEXTURE_SIZE_ENUM = ::libc::c_uint;
pub const GL_TEXTURE_WRAP_S: GL_TEXTURE_PARAM_ENUM = 65536;
pub const GL_TEXTURE_WRAP_T: GL_TEXTURE_PARAM_ENUM = 131072;
pub const GL_TEXTURE_FLIP_S: GL_TEXTURE_PARAM_ENUM = 262144;
pub const GL_TEXTURE_FLIP_T: GL_TEXTURE_PARAM_ENUM = 524288;
pub const GL_TEXTURE_COLOR0_TRANSPARENT: GL_TEXTURE_PARAM_ENUM = 536870912;
pub const TEXGEN_OFF: GL_TEXTURE_PARAM_ENUM = 0;
pub const TEXGEN_TEXCOORD: GL_TEXTURE_PARAM_ENUM = 1073741824;
pub const TEXGEN_NORMAL: GL_TEXTURE_PARAM_ENUM = -2147483648;
pub const TEXGEN_POSITION: GL_TEXTURE_PARAM_ENUM = -1073741824;
pub type GL_TEXTURE_PARAM_ENUM = ::libc::c_int;
pub const GL_NOTEXTURE: GL_TEXTURE_TYPE_ENUM = 0;
pub const GL_RGB32_A3: GL_TEXTURE_TYPE_ENUM = 1;
pub const GL_RGB4: GL_TEXTURE_TYPE_ENUM = 2;
pub const GL_RGB16: GL_TEXTURE_TYPE_ENUM = 3;
pub const GL_RGB256: GL_TEXTURE_TYPE_ENUM = 4;
pub const GL_COMPRESSED: GL_TEXTURE_TYPE_ENUM = 5;
pub const GL_RGB8_A5: GL_TEXTURE_TYPE_ENUM = 6;
pub const GL_RGBA: GL_TEXTURE_TYPE_ENUM = 7;
pub const GL_RGB: GL_TEXTURE_TYPE_ENUM = 8;
pub type GL_TEXTURE_TYPE_ENUM = ::libc::c_uint;
pub const GL_COLOR_TABLE_FORMAT_EXT: GL_TEXTURE_PALETTE_PARAM_ENUM = 0;
pub const GL_COLOR_TABLE_WIDTH_EXT: GL_TEXTURE_PALETTE_PARAM_ENUM = 1;
pub type GL_TEXTURE_PALETTE_PARAM_ENUM = ::libc::c_uint;
pub const GL_TEXTURE_2D: DISP3DCNT_ENUM = 1;
pub const GL_TOON_HIGHLIGHT: DISP3DCNT_ENUM = 2;
pub const GL_ALPHA_TEST: DISP3DCNT_ENUM = 4;
pub const GL_BLEND: DISP3DCNT_ENUM = 8;
pub const GL_ANTIALIAS: DISP3DCNT_ENUM = 16;
pub const GL_OUTLINE: DISP3DCNT_ENUM = 32;
pub const GL_FOG_ONLY_ALPHA: DISP3DCNT_ENUM = 64;
pub const GL_FOG: DISP3DCNT_ENUM = 128;
pub const GL_COLOR_UNDERFLOW: DISP3DCNT_ENUM = 4096;
pub const GL_POLY_OVERFLOW: DISP3DCNT_ENUM = 8192;
pub const GL_CLEAR_BMP: DISP3DCNT_ENUM = 16384;
pub type DISP3DCNT_ENUM = ::libc::c_uint;
pub const GL_GET_VERTEX_RAM_COUNT: GL_GET_ENUM = 0;
pub const GL_GET_POLYGON_RAM_COUNT: GL_GET_ENUM = 1;
pub const GL_GET_MATRIX_VECTOR: GL_GET_ENUM = 2;
pub const GL_GET_MATRIX_POSITION: GL_GET_ENUM = 3;
pub const GL_GET_MATRIX_PROJECTION: GL_GET_ENUM = 4;
pub const GL_GET_MATRIX_CLIP: GL_GET_ENUM = 5;
pub const GL_GET_TEXTURE_WIDTH: GL_GET_ENUM = 6;
pub const GL_GET_TEXTURE_HEIGHT: GL_GET_ENUM = 7;
pub type GL_GET_ENUM = ::libc::c_uint;
pub const GL_TRANS_MANUALSORT: GLFLUSH_ENUM = 1;
pub const GL_WBUFFERING: GLFLUSH_ENUM = 2;
pub type GLFLUSH_ENUM = ::libc::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct s_SingleBlock {
    pub indexOut: uint32,
    pub AddrSet: *mut uint8,
    pub node: [*mut s_SingleBlock; 4usize],
    pub blockSize: uint32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct s_vramBlock {
    pub startAddr: *mut uint8,
    pub endAddr: *mut uint8,
    pub firstBlock: *mut s_SingleBlock,
    pub firstEmpty: *mut s_SingleBlock,
    pub firstAlloc: *mut s_SingleBlock,
    pub lastExamined: *mut s_SingleBlock,
    pub lastExaminedAddr: *mut uint8,
    pub lastExaminedSize: uint32,
    pub blockPtrs: DynamicArray,
    pub deallocBlocks: DynamicArray,
    pub blockCount: uint32,
    pub deallocCount: uint32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gl_texture_data {
    pub vramAddr: *mut ::libc::c_void,
    pub texIndex: uint32,
    pub texIndexExt: uint32,
    pub palIndex: ::libc::c_int,
    pub texFormat: uint32,
    pub texSize: uint32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gl_palette_data {
    pub vramAddr: *mut ::libc::c_void,
    pub palIndex: uint32,
    pub addr: uint16,
    pub palSize: uint16,
    pub connectCount: uint32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gl_hidden_globals {
    pub matrixMode: GL_MATRIX_MODE_ENUM,
    pub vramBlocks: [*mut s_vramBlock; 2usize],
    pub vramLock: [::libc::c_int; 2usize],
    pub texturePtrs: DynamicArray,
    pub palettePtrs: DynamicArray,
    pub deallocTex: DynamicArray,
    pub deallocPal: DynamicArray,
    pub deallocTexSize: uint32,
    pub deallocPalSize: uint32,
    pub activeTexture: ::libc::c_int,
    pub activePalette: ::libc::c_int,
    pub texCount: ::libc::c_int,
    pub palCount: ::libc::c_int,
    pub clearColor: u32_,
    pub isActive: uint8,
}
extern "C" {
    pub static mut glGlobalData: gl_hidden_globals;
}
extern "C" {
    pub static mut glGlob: *mut gl_hidden_globals;
}
extern "C" {
    pub fn glRotatef32i(angle: ::libc::c_int, x: int32, y: int32, z: int32);
}
extern "C" {
    pub fn glTexImage2D(
        target: ::libc::c_int,
        empty1: ::libc::c_int,
        type_: GL_TEXTURE_TYPE_ENUM,
        sizeX: ::libc::c_int,
        sizeY: ::libc::c_int,
        empty2: ::libc::c_int,
        param: ::libc::c_int,
        texture: *const ::libc::c_void,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn glColorTableEXT(
        target: ::libc::c_int,
        empty1: ::libc::c_int,
        width: uint16,
        empty2: ::libc::c_int,
        empty3: ::libc::c_int,
        table: *const uint16,
    );
}
extern "C" {
    pub fn glColorSubTableEXT(
        target: ::libc::c_int,
        start: ::libc::c_int,
        count: ::libc::c_int,
        empty1: ::libc::c_int,
        empty2: ::libc::c_int,
        data: *const uint16,
    );
}
extern "C" {
    pub fn glGetColorTableEXT(
        target: ::libc::c_int,
        empty1: ::libc::c_int,
        empty2: ::libc::c_int,
        table: *mut uint16,
    );
}
extern "C" {
    pub fn glAssignColorTable(target: ::libc::c_int, name: ::libc::c_int);
}
extern "C" {
    pub fn glTexParameter(target: ::libc::c_int, param: ::libc::c_int);
}
extern "C" {
    pub fn glGetTexParameter() -> u32_;
}
extern "C" {
    pub fn glGetColorTableParameterEXT(
        target: ::libc::c_int,
        pname: ::libc::c_int,
        params: *mut ::libc::c_int,
    );
}
extern "C" {
    pub fn glGetTexturePointer(name: ::libc::c_int) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn glBindTexture(target: ::libc::c_int, name: ::libc::c_int);
}
extern "C" {
    pub fn glGenTextures(n: ::libc::c_int, names: *mut ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn glDeleteTextures(n: ::libc::c_int, names: *mut ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn glResetTextures();
}
extern "C" {
    pub fn glLockVRAMBank(addr: *mut uint16) -> ::libc::c_int;
}
extern "C" {
    pub fn glUnlockVRAMBank(addr: *mut uint16) -> ::libc::c_int;
}
extern "C" {
    pub fn glTexCoord2f32(u: int32, v: int32);
}
extern "C" {
    pub fn glMaterialf(mode: GL_MATERIALS_ENUM, color: rgb);
}
extern "C" {
    pub fn glInit_C();
}
extern "C" {
    pub fn glGetGlobals() -> *mut gl_hidden_globals;
}
extern "C" {
    pub fn BoxTest(x: v16, y: v16, z: v16, width: v16, height: v16, depth: v16) -> ::libc::c_int;
}
extern "C" {
    pub fn BoxTestf(x: f32, y: f32, z: f32, width: f32, height: f32, depth: f32) -> ::libc::c_int;
}
extern "C" {
    pub fn BoxTest_Asynch(x: v16, y: v16, z: v16, height: v16, width: v16, depth: v16);
}
extern "C" {
    pub fn BoxTestf_Asynch(x: f32, y: f32, z: f32, width: f32, height: f32, depth: f32);
}
extern "C" {
    pub fn BoxTestResult() -> ::libc::c_int;
}
pub type ConsolePrint = ::core::option::Option<
    unsafe extern "C" fn(con: *mut ::libc::c_void, c: ::libc::c_char) -> bool,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ConsoleFont {
    pub gfx: *mut u16_,
    pub pal: *mut u16_,
    pub numColors: u16_,
    pub bpp: u8_,
    pub asciiOffset: u16_,
    pub numChars: u16_,
    pub convertSingleColor: bool,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PrintConsole {
    pub font: ConsoleFont,
    pub fontBgMap: *mut u16_,
    pub fontBgGfx: *mut u16_,
    pub mapBase: u8_,
    pub gfxBase: u8_,
    pub bgLayer: u8_,
    pub bgId: ::libc::c_int,
    pub cursorX: ::libc::c_int,
    pub cursorY: ::libc::c_int,
    pub prevCursorX: ::libc::c_int,
    pub prevCursorY: ::libc::c_int,
    pub consoleWidth: ::libc::c_int,
    pub consoleHeight: ::libc::c_int,
    pub windowX: ::libc::c_int,
    pub windowY: ::libc::c_int,
    pub windowWidth: ::libc::c_int,
    pub windowHeight: ::libc::c_int,
    pub tabSize: ::libc::c_int,
    pub fontCharOffset: u16_,
    pub fontCurPal: u16_,
    pub PrintChar: ConsolePrint,
    pub consoleInitialised: bool,
    pub loadGraphics: bool,
}
pub const DebugDevice_NULL: DebugDevice = 0;
pub const DebugDevice_NOCASH: DebugDevice = 1;
pub const DebugDevice_CONSOLE: DebugDevice = 2;
pub type DebugDevice = ::libc::c_uint;
extern "C" {
    pub fn consoleSetFont(console: *mut PrintConsole, font: *mut ConsoleFont);
}
extern "C" {
    pub fn consoleSetWindow(
        console: *mut PrintConsole,
        x: ::libc::c_int,
        y: ::libc::c_int,
        width: ::libc::c_int,
        height: ::libc::c_int,
    );
}
extern "C" {
    pub fn consoleGetDefault() -> *mut PrintConsole;
}
extern "C" {
    pub fn consoleSelect(console: *mut PrintConsole) -> *mut PrintConsole;
}
extern "C" {
    pub fn consoleInit(
        console: *mut PrintConsole,
        layer: ::libc::c_int,
        type_: BgType,
        size: BgSize,
        mapBase: ::libc::c_int,
        tileBase: ::libc::c_int,
        mainDisplay: bool,
        loadGraphics: bool,
    ) -> *mut PrintConsole;
}
extern "C" {
    pub fn consoleDemoInit() -> *mut PrintConsole;
}
extern "C" {
    pub fn consoleClear();
}
extern "C" {
    pub fn consoleDebugInit(device: DebugDevice);
}
pub const LZ77: DecompressType = 0;
pub const LZ77Vram: DecompressType = 1;
pub const HUFF: DecompressType = 2;
pub const RLE: DecompressType = 3;
pub const RLEVram: DecompressType = 4;
pub type DecompressType = ::libc::c_uint;
extern "C" {
    pub fn decompress(data: *const ::libc::c_void, dst: *mut ::libc::c_void, type_: DecompressType);
}
extern "C" {
    pub fn decompressStream(
        data: *const ::libc::c_void,
        dst: *mut ::libc::c_void,
        type_: DecompressType,
        readCB: getByteCallback,
        getHeaderCB: getHeaderCallback,
    );
}
extern "C" {
    pub static mut exceptionC: [VoidFn; 0usize];
}
extern "C" {
    pub static mut exceptionStack: u32_;
}
extern "C" {
    pub static mut exceptionRegisters: [s32; 0usize];
}
extern "C" {
    pub fn enterException();
}
extern "C" {
    pub fn setExceptionHandler(handler: VoidFn);
}
extern "C" {
    pub fn defaultExceptionHandler();
}
extern "C" {
    pub fn getCPSR() -> u32_;
}
extern "C" {
    pub fn guitarGripIsInserted() -> bool;
}
extern "C" {
    pub fn guitarGripScanKeys();
}
extern "C" {
    pub fn guitarGripKeysHeld() -> u8_;
}
extern "C" {
    pub fn guitarGripKeysDown() -> u16_;
}
extern "C" {
    pub fn guitarGripKeysUp() -> u16_;
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct RGB_24 {
    pub r: ::libc::c_uchar,
    pub g: ::libc::c_uchar,
    pub b: ::libc::c_uchar,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sImage {
    pub height: ::libc::c_short,
    pub width: ::libc::c_short,
    pub bpp: ::libc::c_int,
    pub palette: *mut ::libc::c_ushort,
    pub image: sImage__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sImage__bindgen_ty_1 {
    pub data8: *mut u8_,
    pub data16: *mut u16_,
    pub data32: *mut u32_,
    _bindgen_union_align: u32,
}
pub type psImage = *mut sImage;
extern "C" {
    pub fn image24to16(img: *mut sImage);
}
extern "C" {
    pub fn image8to16(img: *mut sImage);
}
extern "C" {
    pub fn image8to16trans(img: *mut sImage, transparentColor: u8_);
}
extern "C" {
    pub fn imageDestroy(img: *mut sImage);
}
extern "C" {
    pub fn imageTileData(img: *mut sImage);
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct PCXHeader {
    pub manufacturer: ::libc::c_char,
    pub version: ::libc::c_char,
    pub encoding: ::libc::c_char,
    pub bitsPerPixel: ::libc::c_char,
    pub xmin: ::libc::c_short,
    pub ymin: ::libc::c_short,
    pub xmax: ::libc::c_short,
    pub ymax: ::libc::c_short,
    pub hres: ::libc::c_short,
    pub vres: ::libc::c_short,
    pub palette16: [::libc::c_char; 48usize],
    pub reserved: ::libc::c_char,
    pub colorPlanes: ::libc::c_char,
    pub bytesPerLine: ::libc::c_short,
    pub paletteYype: ::libc::c_short,
    pub filler: [::libc::c_char; 58usize],
}
pub type pPCXHeader = *mut PCXHeader;
extern "C" {
    pub fn loadPCX(pcx: *const ::libc::c_uchar, image: *mut sImage) -> ::libc::c_int;
}
extern "C" {
    pub fn scanKeys();
}
extern "C" {
    pub fn keysCurrent() -> uint32;
}
extern "C" {
    pub fn keysHeld() -> uint32;
}
extern "C" {
    pub fn keysDown() -> uint32;
}
extern "C" {
    pub fn keysDownRepeat() -> uint32;
}
extern "C" {
    pub fn keysSetRepeat(setDelay: u8_, setRepeat: u8_);
}
extern "C" {
    pub fn keysUp() -> uint32;
}
extern "C" {
    pub fn touchReadXY() -> touchPosition;
}
extern "C" {
    pub fn touchRead(data: *mut touchPosition);
}
pub type KeyChangeCallback = ::core::option::Option<unsafe extern "C" fn(key: ::libc::c_int)>;
pub const Lower: KeyboardState = 0;
pub const Upper: KeyboardState = 1;
pub const Numeric: KeyboardState = 2;
pub const Reduced: KeyboardState = 3;
pub type KeyboardState = ::libc::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct KeyMap {
    pub mapDataPressed: *const u16_,
    pub mapDataReleased: *const u16_,
    pub keymap: *const ::libc::c_int,
    pub width: ::libc::c_int,
    pub height: ::libc::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Keyboard {
    pub background: ::libc::c_int,
    pub keyboardOnSub: ::libc::c_int,
    pub offset_x: ::libc::c_int,
    pub offset_y: ::libc::c_int,
    pub grid_width: ::libc::c_int,
    pub grid_height: ::libc::c_int,
    pub state: KeyboardState,
    pub shifted: ::libc::c_int,
    pub visible: ::libc::c_int,
    pub mappings: [*mut KeyMap; 4usize],
    pub tiles: *const u16_,
    pub tileLen: u32_,
    pub palette: *const u16_,
    pub paletteLen: u32_,
    pub mapBase: ::libc::c_int,
    pub tileBase: ::libc::c_int,
    pub tileOffset: ::libc::c_int,
    pub scrollSpeed: u32_,
    pub OnKeyPressed: KeyChangeCallback,
    pub OnKeyReleased: KeyChangeCallback,
}
pub const NOKEY: Keys = -1;
pub const DVK_FOLD: Keys = -23;
pub const DVK_TAB: Keys = 9;
pub const DVK_BACKSPACE: Keys = 8;
pub const DVK_CAPS: Keys = -15;
pub const DVK_SHIFT: Keys = -14;
pub const DVK_SPACE: Keys = 32;
pub const DVK_MENU: Keys = -5;
pub const DVK_ENTER: Keys = 10;
pub const DVK_CTRL: Keys = -16;
pub const DVK_UP: Keys = -17;
pub const DVK_RIGHT: Keys = -18;
pub const DVK_DOWN: Keys = -19;
pub const DVK_LEFT: Keys = -20;
pub const DVK_ALT: Keys = -26;
pub type Keys = ::libc::c_int;
extern "C" {
    pub fn keyboardGetDefault() -> *mut Keyboard;
}
extern "C" {
    pub fn keyboardInit(
        keyboard: *mut Keyboard,
        layer: ::libc::c_int,
        type_: BgType,
        size: BgSize,
        mapBase: ::libc::c_int,
        tileBase: ::libc::c_int,
        mainDisplay: bool,
        loadGraphics: bool,
    ) -> *mut Keyboard;
}
extern "C" {
    pub fn keyboardDemoInit() -> *mut Keyboard;
}
extern "C" {
    pub fn keyboardShow();
}
extern "C" {
    pub fn keyboardHide();
}
extern "C" {
    pub fn keyboardGetKey(x: ::libc::c_int, y: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn keyboardGetString(buffer: *mut ::libc::c_char, maxLen: ::libc::c_int);
}
extern "C" {
    pub fn keyboardGetChar() -> ::libc::c_int;
}
extern "C" {
    pub fn keyboardUpdate() -> ::libc::c_int;
}
extern "C" {
    pub fn paddleIsInserted() -> bool;
}
extern "C" {
    pub fn paddleRead() -> u16_;
}
extern "C" {
    pub fn paddleReset();
}
extern "C" {
    pub fn pianoIsInserted() -> bool;
}
extern "C" {
    pub fn pianoScanKeys();
}
extern "C" {
    pub fn pianoKeysHeld() -> u16_;
}
extern "C" {
    pub fn pianoKeysDown() -> u16_;
}
extern "C" {
    pub fn pianoKeysUp() -> u16_;
}
pub const RUMBLE: RUMBLE_TYPE = 0;
pub const WARIOWARE: RUMBLE_TYPE = 1;
pub type RUMBLE_TYPE = ::libc::c_uint;
extern "C" {
    pub fn isRumbleInserted() -> bool;
}
extern "C" {
    pub fn setRumble(position: bool);
}
pub type MicCallback = ::core::option::Option<
    unsafe extern "C" fn(completedBuffer: *mut ::libc::c_void, length: ::libc::c_int),
>;
pub const SoundFormat_16Bit: SoundFormat = 1;
pub const SoundFormat_8Bit: SoundFormat = 0;
pub const SoundFormat_PSG: SoundFormat = 3;
pub const SoundFormat_ADPCM: SoundFormat = 2;
pub type SoundFormat = ::libc::c_uint;
pub const MicFormat_8Bit: MicFormat = 1;
pub const MicFormat_12Bit: MicFormat = 0;
pub type MicFormat = ::libc::c_uint;
pub const DutyCycle_0: DutyCycle = 7;
pub const DutyCycle_12: DutyCycle = 0;
pub const DutyCycle_25: DutyCycle = 1;
pub const DutyCycle_37: DutyCycle = 2;
pub const DutyCycle_50: DutyCycle = 3;
pub const DutyCycle_62: DutyCycle = 4;
pub const DutyCycle_75: DutyCycle = 5;
pub const DutyCycle_87: DutyCycle = 6;
pub type DutyCycle = ::libc::c_uint;
extern "C" {
    pub fn soundEnable();
}
extern "C" {
    pub fn soundDisable();
}
extern "C" {
    pub fn soundPlaySample(
        data: *const ::libc::c_void,
        format: SoundFormat,
        dataSize: u32_,
        freq: u16_,
        volume: u8_,
        pan: u8_,
        loop_: bool,
        loopPoint: u16_,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn soundPlayPSG(cycle: DutyCycle, freq: u16_, volume: u8_, pan: u8_) -> ::libc::c_int;
}
extern "C" {
    pub fn soundPlayNoise(freq: u16_, volume: u8_, pan: u8_) -> ::libc::c_int;
}
extern "C" {
    pub fn soundPause(soundId: ::libc::c_int);
}
extern "C" {
    pub fn soundSetWaveDuty(soundId: ::libc::c_int, cycle: DutyCycle);
}
extern "C" {
    pub fn soundKill(soundId: ::libc::c_int);
}
extern "C" {
    pub fn soundResume(soundId: ::libc::c_int);
}
extern "C" {
    pub fn soundSetVolume(soundId: ::libc::c_int, volume: u8_);
}
extern "C" {
    pub fn soundSetPan(soundId: ::libc::c_int, pan: u8_);
}
extern "C" {
    pub fn soundSetFreq(soundId: ::libc::c_int, freq: u16_);
}
extern "C" {
    pub fn soundMicRecord(
        buffer: *mut ::libc::c_void,
        bufferLength: u32_,
        format: MicFormat,
        freq: ::libc::c_int,
        callback: MicCallback,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn soundMicOff();
}
pub const OBJMODE_NORMAL: ObjBlendMode = 0;
pub const OBJMODE_BLENDED: ObjBlendMode = 1;
pub const OBJMODE_WINDOWED: ObjBlendMode = 2;
pub const OBJMODE_BITMAP: ObjBlendMode = 3;
pub type ObjBlendMode = ::libc::c_uint;
pub const OBJSHAPE_SQUARE: ObjShape = 0;
pub const OBJSHAPE_WIDE: ObjShape = 1;
pub const OBJSHAPE_TALL: ObjShape = 2;
pub const OBJSHAPE_FORBIDDEN: ObjShape = 3;
pub type ObjShape = ::libc::c_uint;
pub const OBJSIZE_8: ObjSize = 0;
pub const OBJSIZE_16: ObjSize = 1;
pub const OBJSIZE_32: ObjSize = 2;
pub const OBJSIZE_64: ObjSize = 3;
pub type ObjSize = ::libc::c_uint;
pub const OBJCOLOR_16: ObjColMode = 0;
pub const OBJCOLOR_256: ObjColMode = 1;
pub type ObjColMode = ::libc::c_uint;
pub const OBJPRIORITY_0: ObjPriority = 0;
pub const OBJPRIORITY_1: ObjPriority = 1;
pub const OBJPRIORITY_2: ObjPriority = 2;
pub const OBJPRIORITY_3: ObjPriority = 3;
pub type ObjPriority = ::libc::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub union SpriteEntry {
    pub __bindgen_anon_1: SpriteEntry__bindgen_ty_1,
    pub __bindgen_anon_2: SpriteEntry__bindgen_ty_2,
    _bindgen_union_align: [u32; 6usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SpriteEntry__bindgen_ty_1 {
    pub __bindgen_anon_1: SpriteEntry__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: SpriteEntry__bindgen_ty_1__bindgen_ty_2,
    pub __bindgen_anon_3: SpriteEntry__bindgen_ty_1__bindgen_ty_3,
    pub attribute3: u16_,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SpriteEntry__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_anon_1: SpriteEntry__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union SpriteEntry__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    pub __bindgen_anon_1: SpriteEntry__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: SpriteEntry__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2,
    _bindgen_union_align: u32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SpriteEntry__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl SpriteEntry__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn isHidden(&self) -> bool {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_isHidden(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(isHidden: bool) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let isHidden: u8 = unsafe { ::core::mem::transmute(isHidden) };
            isHidden as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct SpriteEntry__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
impl SpriteEntry__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2 {
    #[inline]
    pub fn isRotateScale(&self) -> bool {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_isRotateScale(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn isSizeDouble(&self) -> bool {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_isSizeDouble(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn blendMode(&self) -> ObjBlendMode {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_blendMode(&mut self, val: ObjBlendMode) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn isMosaic(&self) -> bool {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_isMosaic(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn colorMode(&self) -> ObjColMode {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_colorMode(&mut self, val: ObjColMode) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn shape(&self) -> ObjShape {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_shape(&mut self, val: ObjShape) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        isRotateScale: bool,
        isSizeDouble: bool,
        blendMode: ObjBlendMode,
        isMosaic: bool,
        colorMode: ObjColMode,
        shape: ObjShape,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let isRotateScale: u8 = unsafe { ::core::mem::transmute(isRotateScale) };
            isRotateScale as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let isSizeDouble: u8 = unsafe { ::core::mem::transmute(isSizeDouble) };
            isSizeDouble as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let blendMode: u32 = unsafe { ::core::mem::transmute(blendMode) };
            blendMode as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let isMosaic: u8 = unsafe { ::core::mem::transmute(isMosaic) };
            isMosaic as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let colorMode: u32 = unsafe { ::core::mem::transmute(colorMode) };
            colorMode as u64
        });
        __bindgen_bitfield_unit.set(6usize, 2u8, {
            let shape: u32 = unsafe { ::core::mem::transmute(shape) };
            shape as u64
        });
        __bindgen_bitfield_unit
    }
}
impl SpriteEntry__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn y(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u16) }
    }
    #[inline]
    pub fn set_y(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(y: u16_) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let y: u16 = unsafe { ::core::mem::transmute(y) };
            y as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union SpriteEntry__bindgen_ty_1__bindgen_ty_2 {
    pub __bindgen_anon_1: SpriteEntry__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1,
    pub __bindgen_anon_2: SpriteEntry__bindgen_ty_1__bindgen_ty_2__bindgen_ty_2,
    _bindgen_union_align: [u32; 2usize],
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct SpriteEntry__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
impl SpriteEntry__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1 {
    #[inline]
    pub fn x(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 9u8) as u16) }
    }
    #[inline]
    pub fn set_x(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 9u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(x: u16_) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 9u8, {
            let x: u16 = unsafe { ::core::mem::transmute(x) };
            x as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SpriteEntry__bindgen_ty_1__bindgen_ty_2__bindgen_ty_2 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_anon_1: SpriteEntry__bindgen_ty_1__bindgen_ty_2__bindgen_ty_2__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union SpriteEntry__bindgen_ty_1__bindgen_ty_2__bindgen_ty_2__bindgen_ty_1 {
    pub __bindgen_anon_1:
        SpriteEntry__bindgen_ty_1__bindgen_ty_2__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2:
        SpriteEntry__bindgen_ty_1__bindgen_ty_2__bindgen_ty_2__bindgen_ty_1__bindgen_ty_2,
    _bindgen_union_align: u32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SpriteEntry__bindgen_ty_1__bindgen_ty_2__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl SpriteEntry__bindgen_ty_1__bindgen_ty_2__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn hFlip(&self) -> bool {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_hFlip(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn vFlip(&self) -> bool {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_vFlip(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(hFlip: bool, vFlip: bool) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let hFlip: u8 = unsafe { ::core::mem::transmute(hFlip) };
            hFlip as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let vFlip: u8 = unsafe { ::core::mem::transmute(vFlip) };
            vFlip as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct SpriteEntry__bindgen_ty_1__bindgen_ty_2__bindgen_ty_2__bindgen_ty_1__bindgen_ty_2 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
impl SpriteEntry__bindgen_ty_1__bindgen_ty_2__bindgen_ty_2__bindgen_ty_1__bindgen_ty_2 {
    #[inline]
    pub fn rotationIndex(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 5u8) as u8) }
    }
    #[inline]
    pub fn set_rotationIndex(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn size(&self) -> ObjSize {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_size(&mut self, val: ObjSize) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        rotationIndex: u8_,
        size: ObjSize,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(1usize, 5u8, {
            let rotationIndex: u8 = unsafe { ::core::mem::transmute(rotationIndex) };
            rotationIndex as u64
        });
        __bindgen_bitfield_unit.set(6usize, 2u8, {
            let size: u32 = unsafe { ::core::mem::transmute(size) };
            size as u64
        });
        __bindgen_bitfield_unit
    }
}
impl SpriteEntry__bindgen_ty_1__bindgen_ty_2__bindgen_ty_2 {
    #[inline]
    pub fn new_bitfield_1() -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct SpriteEntry__bindgen_ty_1__bindgen_ty_3 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub __bindgen_padding_0: u16,
}
impl SpriteEntry__bindgen_ty_1__bindgen_ty_3 {
    #[inline]
    pub fn gfxIndex(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 10u8) as u16) }
    }
    #[inline]
    pub fn set_gfxIndex(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 10u8, val as u64)
        }
    }
    #[inline]
    pub fn priority(&self) -> ObjPriority {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_priority(&mut self, val: ObjPriority) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn palette(&self) -> u8_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_palette(&mut self, val: u8_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        gfxIndex: u16_,
        priority: ObjPriority,
        palette: u8_,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 10u8, {
            let gfxIndex: u16 = unsafe { ::core::mem::transmute(gfxIndex) };
            gfxIndex as u64
        });
        __bindgen_bitfield_unit.set(10usize, 2u8, {
            let priority: u32 = unsafe { ::core::mem::transmute(priority) };
            priority as u64
        });
        __bindgen_bitfield_unit.set(12usize, 4u8, {
            let palette: u8 = unsafe { ::core::mem::transmute(palette) };
            palette as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SpriteEntry__bindgen_ty_2 {
    pub attribute: [uint16; 3usize],
    pub filler: uint16,
}
pub type pSpriteEntry = *mut SpriteEntry;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SpriteRotation {
    pub filler1: [uint16; 3usize],
    pub hdx: int16,
    pub filler2: [uint16; 3usize],
    pub vdx: int16,
    pub filler3: [uint16; 3usize],
    pub hdy: int16,
    pub filler4: [uint16; 3usize],
    pub vdy: int16,
}
pub type pSpriteRotation = *mut SpriteRotation;
#[repr(C)]
#[derive(Copy, Clone)]
pub union OAMTable {
    pub oamBuffer: [SpriteEntry; 128usize],
    pub matrixBuffer: [SpriteRotation; 32usize],
    _bindgen_union_align: [u32; 768usize],
}
pub const SpriteSize_8x8: SpriteSize = 2;
pub const SpriteSize_16x16: SpriteSize = 16392;
pub const SpriteSize_32x32: SpriteSize = 32800;
pub const SpriteSize_64x64: SpriteSize = 49280;
pub const SpriteSize_16x8: SpriteSize = 4100;
pub const SpriteSize_32x8: SpriteSize = 20488;
pub const SpriteSize_32x16: SpriteSize = 36880;
pub const SpriteSize_64x32: SpriteSize = 53312;
pub const SpriteSize_8x16: SpriteSize = 8196;
pub const SpriteSize_8x32: SpriteSize = 24584;
pub const SpriteSize_16x32: SpriteSize = 40976;
pub const SpriteSize_32x64: SpriteSize = 57408;
pub type SpriteSize = ::libc::c_uint;
pub const SpriteMapping_1D_32: SpriteMapping = 16;
pub const SpriteMapping_1D_64: SpriteMapping = 269484049;
pub const SpriteMapping_1D_128: SpriteMapping = 538968082;
pub const SpriteMapping_1D_256: SpriteMapping = 808452115;
pub const SpriteMapping_2D: SpriteMapping = 1073741824;
pub const SpriteMapping_Bmp_1D_128: SpriteMapping = 1344274514;
pub const SpriteMapping_Bmp_1D_256: SpriteMapping = 1617952851;
pub const SpriteMapping_Bmp_2D_128: SpriteMapping = 1879048194;
pub const SpriteMapping_Bmp_2D_256: SpriteMapping = -2147483613;
pub type SpriteMapping = ::libc::c_int;
pub const SpriteColorFormat_16Color: SpriteColorFormat = 0;
pub const SpriteColorFormat_256Color: SpriteColorFormat = 1;
pub const SpriteColorFormat_Bmp: SpriteColorFormat = 3;
pub type SpriteColorFormat = ::libc::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AllocHeader {
    pub nextFree: u16_,
    pub size: u16_,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct OamState {
    pub gfxOffsetStep: ::libc::c_int,
    pub firstFree: s16,
    pub allocBuffer: *mut AllocHeader,
    pub allocBufferSize: s16,
    pub __bindgen_anon_1: OamState__bindgen_ty_1,
    pub spriteMapping: SpriteMapping,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union OamState__bindgen_ty_1 {
    pub oamMemory: *mut SpriteEntry,
    pub oamRotationMemory: *mut SpriteRotation,
    _bindgen_union_align: u32,
}
extern "C" {
    pub static mut oamMain: OamState;
}
extern "C" {
    pub static mut oamSub: OamState;
}
extern "C" {
    pub fn oamGfxPtrToOffset(oam: *mut OamState, offset: *const ::libc::c_void) -> ::libc::c_uint;
}
extern "C" {
    pub fn oamInit(oam: *mut OamState, mapping: SpriteMapping, extPalette: bool);
}
extern "C" {
    pub fn oamDisable(oam: *mut OamState);
}
extern "C" {
    pub fn oamEnable(oam: *mut OamState);
}
extern "C" {
    pub fn oamGetGfxPtr(oam: *mut OamState, gfxOffsetIndex: ::libc::c_int) -> *mut u16_;
}
extern "C" {
    pub fn oamAllocateGfx(
        oam: *mut OamState,
        size: SpriteSize,
        colorFormat: SpriteColorFormat,
    ) -> *mut u16_;
}
extern "C" {
    pub fn oamFreeGfx(oam: *mut OamState, gfxOffset: *const ::libc::c_void);
}
extern "C" {
    pub fn oamSet(
        oam: *mut OamState,
        id: ::libc::c_int,
        x: ::libc::c_int,
        y: ::libc::c_int,
        priority: ::libc::c_int,
        palette_alpha: ::libc::c_int,
        size: SpriteSize,
        format: SpriteColorFormat,
        gfxOffset: *const ::libc::c_void,
        affineIndex: ::libc::c_int,
        sizeDouble: bool,
        hide: bool,
        hflip: bool,
        vflip: bool,
        mosaic: bool,
    );
}
extern "C" {
    pub fn oamClear(oam: *mut OamState, start: ::libc::c_int, count: ::libc::c_int);
}
extern "C" {
    pub fn oamUpdate(oam: *mut OamState);
}
extern "C" {
    pub fn oamRotateScale(
        oam: *mut OamState,
        rotId: ::libc::c_int,
        angle: ::libc::c_int,
        sx: ::libc::c_int,
        sy: ::libc::c_int,
    );
}
extern "C" {
    pub fn oamCountFragments(oam: *mut OamState) -> ::libc::c_int;
}
extern "C" {
    pub fn oamAllocReset(oam: *mut OamState);
}
pub const WINDOW_0: WINDOW = 8192;
pub const WINDOW_1: WINDOW = 16384;
pub const WINDOW_OBJ: WINDOW = 32768;
pub const WINDOW_OUT: WINDOW = 65536;
pub type WINDOW = ::libc::c_uint;
extern "C" {
    pub fn windowSetBounds(window: WINDOW, left: u8_, top: u8_, right: u8_, bottom: u8_);
}
extern "C" {
    pub fn windowSetBoundsSub(window: WINDOW, left: u8_, top: u8_, right: u8_, bottom: u8_);
}
extern "C" {
    pub fn bgWindowEnable(id: ::libc::c_int, window: WINDOW);
}
extern "C" {
    pub fn bgWindowDisable(id: ::libc::c_int, window: WINDOW);
}
extern "C" {
    pub fn oamWindowEnable(oam: *mut OamState, w: WINDOW);
}
extern "C" {
    pub fn oamWindowDisable(oam: *mut OamState, w: WINDOW);
}
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = __intptr_t;
pub type __sigset_t = ::libc::c_ulong;
pub type suseconds_t = __suseconds_t;
pub type time_t = __int_least64_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: time_t,
    pub tv_usec: suseconds_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: time_t,
    pub tv_nsec: ::libc::c_long,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerspec {
    pub it_interval: timespec,
    pub it_value: timespec,
}
pub type sigset_t = __sigset_t;
pub type fd_mask = ::libc::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _types_fd_set {
    pub fds_bits: [fd_mask; 2usize],
}
extern "C" {
    pub fn select(
        __n: ::libc::c_int,
        __readfds: *mut _types_fd_set,
        __writefds: *mut _types_fd_set,
        __exceptfds: *mut _types_fd_set,
        __timeout: *mut timeval,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn pselect(
        __n: ::libc::c_int,
        __readfds: *mut _types_fd_set,
        __writefds: *mut _types_fd_set,
        __exceptfds: *mut _types_fd_set,
        __timeout: *const timespec,
        __set: *const sigset_t,
    ) -> ::libc::c_int;
}
pub type in_addr_t = __uint32_t;
pub type in_port_t = __uint16_t;
pub type u_register_t = __uintptr_t;
pub type u_char = ::libc::c_uchar;
pub type u_short = ::libc::c_ushort;
pub type u_int = ::libc::c_uint;
pub type u_long = ::libc::c_ulong;
pub type ushort = ::libc::c_ushort;
pub type uint = ::libc::c_uint;
pub type ulong = ::libc::c_ulong;
pub type blkcnt_t = __blkcnt_t;
pub type blksize_t = __blksize_t;
pub type clock_t = ::libc::c_ulong;
pub type daddr_t = ::libc::c_long;
pub type caddr_t = *mut ::libc::c_char;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type id_t = __id_t;
pub type ino_t = __ino_t;
pub type off_t = __off_t;
pub type dev_t = __dev_t;
pub type uid_t = __uid_t;
pub type gid_t = __gid_t;
pub type pid_t = __pid_t;
pub type key_t = __key_t;
pub type ssize_t = _ssize_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
pub type useconds_t = __useconds_t;
pub type sbintime_t = __int64_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sched_param {
    pub sched_priority: ::libc::c_int,
}
pub type pthread_t = __uint32_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_attr_t {
    pub is_initialized: ::libc::c_int,
    pub stackaddr: *mut ::libc::c_void,
    pub stacksize: ::libc::c_int,
    pub contentionscope: ::libc::c_int,
    pub inheritsched: ::libc::c_int,
    pub schedpolicy: ::libc::c_int,
    pub schedparam: sched_param,
    pub detachstate: ::libc::c_int,
}
pub type pthread_mutex_t = __uint32_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_mutexattr_t {
    pub is_initialized: ::libc::c_int,
    pub recursive: ::libc::c_int,
}
pub type pthread_cond_t = __uint32_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_condattr_t {
    pub is_initialized: ::libc::c_int,
    pub clock: clock_t,
}
pub type pthread_key_t = __uint32_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_once_t {
    pub is_initialized: ::libc::c_int,
    pub init_executed: ::libc::c_int,
}
extern "C" {
    pub static mut environ: *mut *mut ::libc::c_char;
}
extern "C" {
    pub fn _exit(__status: ::libc::c_int);
}
extern "C" {
    pub fn access(__path: *const ::libc::c_char, __amode: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn alarm(__secs: ::libc::c_uint) -> ::libc::c_uint;
}
extern "C" {
    pub fn chdir(__path: *const ::libc::c_char) -> ::libc::c_int;
}
extern "C" {
    pub fn chmod(__path: *const ::libc::c_char, __mode: mode_t) -> ::libc::c_int;
}
extern "C" {
    pub fn chown(__path: *const ::libc::c_char, __owner: uid_t, __group: gid_t) -> ::libc::c_int;
}
extern "C" {
    pub fn chroot(__path: *const ::libc::c_char) -> ::libc::c_int;
}
extern "C" {
    pub fn close(__fildes: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn confstr(__name: ::libc::c_int, __buf: *mut ::libc::c_char, __len: size_t) -> size_t;
}
extern "C" {
    pub fn daemon(nochdir: ::libc::c_int, noclose: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn dup(__fildes: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn dup2(__fildes: ::libc::c_int, __fildes2: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn endusershell();
}
extern "C" {
    pub fn execl(__path: *const ::libc::c_char, arg1: *const ::libc::c_char, ...) -> ::libc::c_int;
}
extern "C" {
    pub fn execle(__path: *const ::libc::c_char, arg1: *const ::libc::c_char, ...)
        -> ::libc::c_int;
}
extern "C" {
    pub fn execlp(__file: *const ::libc::c_char, arg1: *const ::libc::c_char, ...)
        -> ::libc::c_int;
}
extern "C" {
    pub fn execlpe(
        __file: *const ::libc::c_char,
        arg1: *const ::libc::c_char,
        ...
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn execv(
        __path: *const ::libc::c_char,
        __argv: *const *mut ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn execve(
        __path: *const ::libc::c_char,
        __argv: *const *mut ::libc::c_char,
        __envp: *const *mut ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn execvp(
        __file: *const ::libc::c_char,
        __argv: *const *mut ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn faccessat(
        __dirfd: ::libc::c_int,
        __path: *const ::libc::c_char,
        __mode: ::libc::c_int,
        __flags: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn fchdir(__fildes: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn fchmod(__fildes: ::libc::c_int, __mode: mode_t) -> ::libc::c_int;
}
extern "C" {
    pub fn fchown(__fildes: ::libc::c_int, __owner: uid_t, __group: gid_t) -> ::libc::c_int;
}
extern "C" {
    pub fn fchownat(
        __dirfd: ::libc::c_int,
        __path: *const ::libc::c_char,
        __owner: uid_t,
        __group: gid_t,
        __flags: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn fexecve(
        __fd: ::libc::c_int,
        __argv: *const *mut ::libc::c_char,
        __envp: *const *mut ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn fork() -> pid_t;
}
extern "C" {
    pub fn fpathconf(__fd: ::libc::c_int, __name: ::libc::c_int) -> ::libc::c_long;
}
extern "C" {
    pub fn fsync(__fd: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn fdatasync(__fd: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn getcwd(__buf: *mut ::libc::c_char, __size: size_t) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn getdomainname(__name: *mut ::libc::c_char, __len: size_t) -> ::libc::c_int;
}
extern "C" {
    pub fn getentropy(arg1: *mut ::libc::c_void, arg2: size_t) -> ::libc::c_int;
}
extern "C" {
    pub fn getegid() -> gid_t;
}
extern "C" {
    pub fn geteuid() -> uid_t;
}
extern "C" {
    pub fn getgid() -> gid_t;
}
extern "C" {
    pub fn getgroups(__gidsetsize: ::libc::c_int, __grouplist: *mut gid_t) -> ::libc::c_int;
}
extern "C" {
    pub fn gethostid() -> ::libc::c_long;
}
extern "C" {
    pub fn getlogin() -> *mut ::libc::c_char;
}
extern "C" {
    pub fn getpass(__prompt: *const ::libc::c_char) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn getpagesize() -> ::libc::c_int;
}
extern "C" {
    pub fn getpeereid(arg1: ::libc::c_int, arg2: *mut uid_t, arg3: *mut gid_t) -> ::libc::c_int;
}
extern "C" {
    pub fn getpgid(arg1: pid_t) -> pid_t;
}
extern "C" {
    pub fn getpgrp() -> pid_t;
}
extern "C" {
    pub fn getpid() -> pid_t;
}
extern "C" {
    pub fn getppid() -> pid_t;
}
extern "C" {
    pub fn getsid(arg1: pid_t) -> pid_t;
}
extern "C" {
    pub fn getuid() -> uid_t;
}
extern "C" {
    pub fn getusershell() -> *mut ::libc::c_char;
}
extern "C" {
    pub fn getwd(__buf: *mut ::libc::c_char) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn iruserok(
        raddr: ::libc::c_ulong,
        superuser: ::libc::c_int,
        ruser: *const ::libc::c_char,
        luser: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn isatty(__fildes: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn issetugid() -> ::libc::c_int;
}
extern "C" {
    pub fn lchown(__path: *const ::libc::c_char, __owner: uid_t, __group: gid_t) -> ::libc::c_int;
}
extern "C" {
    pub fn link(__path1: *const ::libc::c_char, __path2: *const ::libc::c_char) -> ::libc::c_int;
}
extern "C" {
    pub fn linkat(
        __dirfd1: ::libc::c_int,
        __path1: *const ::libc::c_char,
        __dirfd2: ::libc::c_int,
        __path2: *const ::libc::c_char,
        __flags: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn nice(__nice_value: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn lseek(__fildes: ::libc::c_int, __offset: off_t, __whence: ::libc::c_int) -> off_t;
}
extern "C" {
    pub fn lockf(__fd: ::libc::c_int, __cmd: ::libc::c_int, __len: off_t) -> ::libc::c_int;
}
extern "C" {
    pub fn pathconf(__path: *const ::libc::c_char, __name: ::libc::c_int) -> ::libc::c_long;
}
extern "C" {
    pub fn pause() -> ::libc::c_int;
}
extern "C" {
    pub fn pthread_atfork(
        arg1: ::core::option::Option<unsafe extern "C" fn()>,
        arg2: ::core::option::Option<unsafe extern "C" fn()>,
        arg3: ::core::option::Option<unsafe extern "C" fn()>,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn pipe(__fildes: *mut ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn pread(
        __fd: ::libc::c_int,
        __buf: *mut ::libc::c_void,
        __nbytes: size_t,
        __offset: off_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn pwrite(
        __fd: ::libc::c_int,
        __buf: *const ::libc::c_void,
        __nbytes: size_t,
        __offset: off_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn read(__fd: ::libc::c_int, __buf: *mut ::libc::c_void, __nbyte: size_t) -> ::libc::c_int;
}
extern "C" {
    pub fn rresvport(__alport: *mut ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn revoke(__path: *mut ::libc::c_char) -> ::libc::c_int;
}
extern "C" {
    pub fn rmdir(__path: *const ::libc::c_char) -> ::libc::c_int;
}
extern "C" {
    pub fn ruserok(
        rhost: *const ::libc::c_char,
        superuser: ::libc::c_int,
        ruser: *const ::libc::c_char,
        luser: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn sbrk(__incr: isize) -> *mut ::libc::c_void;
}
extern "C" {
    pub fn setegid(__gid: gid_t) -> ::libc::c_int;
}
extern "C" {
    pub fn seteuid(__uid: uid_t) -> ::libc::c_int;
}
extern "C" {
    pub fn setgid(__gid: gid_t) -> ::libc::c_int;
}
extern "C" {
    pub fn setgroups(ngroups: ::libc::c_int, grouplist: *const gid_t) -> ::libc::c_int;
}
extern "C" {
    pub fn sethostname(arg1: *const ::libc::c_char, arg2: size_t) -> ::libc::c_int;
}
extern "C" {
    pub fn setpgid(__pid: pid_t, __pgid: pid_t) -> ::libc::c_int;
}
extern "C" {
    pub fn setpgrp() -> ::libc::c_int;
}
extern "C" {
    pub fn setregid(__rgid: gid_t, __egid: gid_t) -> ::libc::c_int;
}
extern "C" {
    pub fn setreuid(__ruid: uid_t, __euid: uid_t) -> ::libc::c_int;
}
extern "C" {
    pub fn setsid() -> pid_t;
}
extern "C" {
    pub fn setuid(__uid: uid_t) -> ::libc::c_int;
}
extern "C" {
    pub fn setusershell();
}
extern "C" {
    pub fn sleep(__seconds: ::libc::c_uint) -> ::libc::c_uint;
}
extern "C" {
    pub fn sysconf(__name: ::libc::c_int) -> ::libc::c_long;
}
extern "C" {
    pub fn tcgetpgrp(__fildes: ::libc::c_int) -> pid_t;
}
extern "C" {
    pub fn tcsetpgrp(__fildes: ::libc::c_int, __pgrp_id: pid_t) -> ::libc::c_int;
}
extern "C" {
    pub fn ttyname(__fildes: ::libc::c_int) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn ttyname_r(arg1: ::libc::c_int, arg2: *mut ::libc::c_char, arg3: size_t)
        -> ::libc::c_int;
}
extern "C" {
    pub fn unlink(__path: *const ::libc::c_char) -> ::libc::c_int;
}
extern "C" {
    pub fn usleep(__useconds: useconds_t) -> ::libc::c_int;
}
extern "C" {
    pub fn vhangup() -> ::libc::c_int;
}
extern "C" {
    pub fn write(
        __fd: ::libc::c_int,
        __buf: *const ::libc::c_void,
        __nbyte: size_t,
    ) -> ::libc::c_int;
}
extern "C" {
    pub static mut optarg: *mut ::libc::c_char;
}
extern "C" {
    pub static mut optind: ::libc::c_int;
}
extern "C" {
    pub static mut opterr: ::libc::c_int;
}
extern "C" {
    pub static mut optopt: ::libc::c_int;
}
extern "C" {
    pub fn getopt(
        arg1: ::libc::c_int,
        arg2: *const *mut ::libc::c_char,
        arg3: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub static mut optreset: ::libc::c_int;
}
extern "C" {
    pub fn vfork() -> ::libc::c_int;
}
extern "C" {
    pub fn ftruncate(__fd: ::libc::c_int, __length: off_t) -> ::libc::c_int;
}
extern "C" {
    pub fn truncate(arg1: *const ::libc::c_char, __length: off_t) -> ::libc::c_int;
}
extern "C" {
    pub fn getdtablesize() -> ::libc::c_int;
}
extern "C" {
    pub fn ualarm(__useconds: useconds_t, __interval: useconds_t) -> useconds_t;
}
extern "C" {
    pub fn gethostname(__name: *mut ::libc::c_char, __len: size_t) -> ::libc::c_int;
}
extern "C" {
    pub fn setdtablesize(arg1: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn sync();
}
extern "C" {
    pub fn readlink(
        __path: *const ::libc::c_char,
        __buf: *mut ::libc::c_char,
        __buflen: size_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn symlink(__name1: *const ::libc::c_char, __name2: *const ::libc::c_char)
        -> ::libc::c_int;
}
extern "C" {
    pub fn readlinkat(
        __dirfd1: ::libc::c_int,
        __path: *const ::libc::c_char,
        __buf: *mut ::libc::c_char,
        __buflen: size_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn symlinkat(
        arg1: *const ::libc::c_char,
        arg2: ::libc::c_int,
        arg3: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn unlinkat(
        arg1: ::libc::c_int,
        arg2: *const ::libc::c_char,
        arg3: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn nand_ReadSectors(sector: sec_t, numSectors: sec_t, buffer: *mut ::libc::c_void) -> bool;
}
extern "C" {
    pub fn nand_WriteSectors(
        sector: sec_t,
        numSectors: sec_t,
        buffer: *const ::libc::c_void,
    ) -> bool;
}
extern "C" {
    pub fn nand_GetSize() -> ssize_t;
}
